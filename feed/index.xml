<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
<channel>
        <title>Mertcan GÖKGÖZ - Özgür Yazılım, Sunucu Yönetimi ve Hizmetleri</title>
        <description>Mertcan GÖKGÖZ - Özgür Yazılım, Sunucu Yönetimi ve Hizmetleri - Mertcan GÖKGÖZ</description>
        <link>https://mertcangokgoz.com</link>
        <link></link>
        <lastBuildDate>Sun, 11 Dec 2016 13:09:28 +0300</lastBuildDate>
        <pubDate>Sun, 11 Dec 2016 13:09:28 +0300</pubDate>
        <ttl>1800</ttl>


        <item>
                <title>Linux Üzerinde CHK Dosyalarının Kurtarılması</title>
                <description>&lt;p&gt;USB belleğin yan basması sonucunda içerisindeki veriler bir şekilde bozulmuş bir USB belleği Windows bir sisteme taktığımızda ki sanırım bu otomatik oluyor &lt;code class=&quot;highlighter-rouge&quot;&gt;.CHK&lt;/code&gt; uzantılı bir hal almış. Kayıp dosya parçacıklarını dönüştürmüş ve kurtarma işlemi için hazır yapmış Windowsda bunları tool ile çıkartıyorlar tabi linuxde mimetype bakarak dosya uzantısını değiştirmek yetiyor. Belki Windows üzerindede aynı işlemi yapsak düzelecek ancak bu konuda bir bilgim yok&lt;/p&gt;

&lt;p&gt;Tabi bu kodu kullanmadan önce klasör içerisinde ne tür dosyaların olduğuna şu şekilde bakabilirsiniz.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;file --mime-type -b *.CHK | sort | uniq
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Düzenlenen kodumuz ise şu şekilde kod için &lt;strong&gt;Onur Aslan&lt;/strong&gt; Teşekkür ederim. İçinden çıkamadığım sorunu kendisi güzel bir şekilde çözdü :)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;for file in $(find -iname '*.chk'); do C_EXT=$(file --mime-type $file | cut -d' ' -f2 | xargs -I{} grep {} /etc/mime.types | awk '{ print $2; }'); if [ -n &quot;$C_EXT&quot; ]; then rename -v &quot;s/.chk$/.$C_EXT/i&quot; $file; fi; done
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Kodda bulunan ufak bir bug var bazı mimelerin birden fazla uzantısı olabiliyor. Örneğin; &lt;strong&gt;ppt&lt;/strong&gt; bu gibi dosyalarda grep hepsini aldığı için birden fazla uzantısı varmış gibi gözükebilir. Çok nadir olsa bile böyle bir sorun olduğunu bilmenizde fayda var…&lt;/p&gt;
</description>
                <link>https://mertcangokgoz.com/linux-uzerinde-chk-dosyalarinin-kurtarilmasi/</link>
                <guid>https://mertcangokgoz.com/linux-uzerinde-chk-dosyalarinin-kurtarilmasi</guid>
                <pubDate>Sun, 11 Dec 2016 00:00:00 +0300</pubDate>
        </item>

        <item>
                <title>Centos 7 Üzerine PostgreSQL ile Ruby on Rails Kurulumu</title>
                <description>&lt;p&gt;Ruby on Rails (RoR) veya kısa adıyla “rails”, ruby’de MVC (Model-View-Controller) kavramını takip eden bir sunucu tarafı web uygulaması çerçevesidir. RoR açık kaynak kodlu MIT Lisansı altında yayınlandı. Rails, veritabanları, web hizmetleri ve web sayfaları için varsayılan yapılar sağlar. Rails yaygın olarak kullanılmaktadır ve bugüne kadar 3000’den fazla kişi Rails projesine kod eklemiştir Github, Airbnb, Soundcloud gibi Rails’e dayanan birçok web uygulaması bulunmaktadır.&lt;/p&gt;

&lt;p&gt;Kurulum aşaması&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yum install curl
curl -sSL https://rvm.io/mpapis.asc | gpg --import -
curl -sSL https://get.rvm.io | bash -s stable --ruby
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Komutlar, önce gerekli paketleri (paket bağımlılıkları) yükleyecek ve en son kararlı RVM sürümünü indirip kuracaktır.&lt;/p&gt;

&lt;p&gt;Şimdi, aşağıdaki komutu çalıştırarak RVM’yi kullanmaya başlayabiliriz&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;source /usr/local/rvm/scripts/rvm
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Ruby Kurulumuna başlayalım&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rvm get stable --autolibs=enable
rvm install ruby-2.3.1
rvm --default use ruby-2.3.1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Başarılı bir şekilde kuruldu ise aşağıdaki komut ile sürüm bilgisine bakabilirsiniz&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ruby -v
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Rails, assetleri derlemek için bir JavaScript’e ihtiyaç duyar. Bunun için NodeJS kurulumunu yapıyoruz.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -sL https://rpm.nodesource.com/setup_6.x | sudo -E bash -
yum -y install nodejs
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Gem’i güncelleştirip yapılandırmasını yapalım sonuçta bir sunucu ve geliştirme ortamı kuruyoruz. Gereksizlerin kurulması işimize yaramaz sistem gemlerini güncellememiz yeterli&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem update --system
gem -v
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;.gemrc&lt;/strong&gt; dosyasına aşağıdaki satırı ekleyerek her gem kurulum belgelerini yüklemeyi devre dışı bırakabilirsiniz. Sabit disk alanı kazandıracağından burada internet üzerinden belgeleri okumayı tercih edeceğiz. Ve unutulmamalıdır ki bu işlem isteğe bağlı bir işlemdir.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;echo &quot;gem: --no-document&quot; &amp;gt;&amp;gt; ~/.gemrc
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Tüm bu işlemleri başarılı bir şekilde geçtiğimize göre &lt;strong&gt;Ruby On Rails 5&lt;/strong&gt; kurulumuna geçebiliriz&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem install rails -v 5.0.0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Kurulum başarıyla tamamlandığında rails sürümünü kontrol etmeyi unutmuyoruz&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rails -v
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;rails-gelitirmek-iin-postgresql-veritaban-ayarlamalarnn-yaplmas&quot;&gt;Rails Geliştirmek için PostgreSQL Veritabanı Ayarlamalarının yapılması&lt;/h3&gt;

&lt;p&gt;Bu adımda PostgreSQL’i rails’in geliştirilmesi için hazırlayacağız. Ruby on Rails, MySQL, SQLite (Varsayılan) ve PostgreSQL gibi birçok veritabanını desteklemektedir. Veritabanı olarak PostgreSQL’i kullanacağız.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yum -y install postgresql-server postgresql-devel postgresql-contrib
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Şimdi veritabanı sunucusunu initdb komutu ile başlatmalıyız.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;postgresql-setup initdb
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Varsayılan olarak, &lt;strong&gt;CentOS&lt;/strong&gt; sunucusunda &lt;strong&gt;PostgreSQL&lt;/strong&gt; şifre tabanlı kimlik doğrulamasına kesinlikle izin vermez. RoR kurulumu için &lt;strong&gt;PostgreSQL&lt;/strong&gt; yapılandırmasını bir şifre ile girişlere izin verecek şekilde düzenlememiz gerekiyor.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yum install nano
nano /var/lib/pgsql/data/pg_hba.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Kimlik doğrulama yöntemini &lt;code class=&quot;highlighter-rouge&quot;&gt;md5&lt;/code&gt; olarak değiştiriyoruz.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# IPv4 local connections:
host    all             all             127.0.0.1/32            md5
# IPv6 local connections:
host    all             all             ::1/128                 md5
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;ve servisi yeniden başlatıyoruz.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl start postgresql
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Yükleme tamamlandığında, su ile kabuk üzerinde &lt;code class=&quot;highlighter-rouge&quot;&gt;postgres&lt;/code&gt; kullanıcısı olarak girin ve postgresql kabuğuna (psql) erişin.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;su - postgres
psql
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Aslında bu işlem tüm sistemler için aynı şifre tanımlaması yapmaktan başka bir işe yaramıyor.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;\password postgres
Enter new password:
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Sonra, bu komutla rails geliştirilmesi için &lt;code class=&quot;highlighter-rouge&quot;&gt;rails-dev&lt;/code&gt; adlı yeni bir rol oluşturun:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;create role rails_dev with createdb login password 'admin123';
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Benim şüphelerim var bana kuralları göster dostum diyorsan&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;\du
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Şimdi bir uygulama oluşturalım bakalım RoR çalışıyormu&lt;/p&gt;

&lt;p&gt;rails komutu ile ilk uygulamamızı kolayca oluşturabiliriz. PostgreSQL’i varsayılan veritabanı olarak kullanarak yeni bir uygulama oluşturun.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rails new testcanisi -d postgresql
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Bu komut, yeni bir dizin ‘testcanisi’ oluşturacak ve PostgreSQL veritabanına bağlanmak için rails tarafından gerekli olan “pg” gemini de içeren yeni bir gem yükleyecektir.&lt;/p&gt;

&lt;p&gt;‘testcanisi’ dizinine gidin ve config dizininde &lt;code class=&quot;highlighter-rouge&quot;&gt;database.yml&lt;/code&gt; dosyasını düzenleyin.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd testcanisi/
nano config/database.yml
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;dosya içerisinde 32.satıra denk gelen kısımları yukarıda ayarladığımız şekilde değiştiriyoruz.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;username: rails_dev
password: admin123
host: localhost
port: 5432
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;dosyayı kayıt edip editörden başarılı bir şekilde çıkış yapıyorsunuz. Ardından, veritabanını rails komutu ile oluşturun aynısı django tarafındada var bilenler bilirler&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rails db:setup
rails db:migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Sonra rails sunucusunu aşağıdaki komutu kullanarak çalıştırın:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rails s -b &amp;gt;sunucu-ip&amp;gt; -p 8080
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;İp adresine baktığınızda karşınızda RoR’un kullandığı ön tanımlı sayfayı göreceksiniz ve onu gördüğünüzde kurulumu başarılı bir şekilde yaptığınızı anlayabilirsiniz.&lt;/p&gt;

&lt;p&gt;Artık RoR uygulamaları geliştirebilir veya geliştirilmiş herhangi bir uygulamayı canlıya alabilirsiniz.&lt;/p&gt;
</description>
                <link>https://mertcangokgoz.com/centos-7-uzerine-postgresql-ile-ruby-on-rails-kurulumu/</link>
                <guid>https://mertcangokgoz.com/centos-7-uzerine-postgresql-ile-ruby-on-rails-kurulumu</guid>
                <pubDate>Sat, 10 Dec 2016 00:00:00 +0300</pubDate>
        </item>

        <item>
                <title>Authy SSH İle Sunucu Güvenliğinin Arttırılması</title>
                <description>&lt;p&gt;Sistemlerinizde güvenliği biraz daha arttırmak için Authy web sitesinin bizlere sunmuş olduğu uygulamayı kullanacağız ve sistemlerimizde 2FA doğrulamayı aktif etmiş olacağız böylelikle sistemlerinize girişte Cep telefon numaranıza gelen veyahut da uygulama ile oluşturulmuş şifreyi girmeniz gerekecektir. Aksi durumda sistemlere giriş yapabilme gibi bir imkanınız bulunmamaktadır.&lt;/p&gt;

&lt;p&gt;Önceliklik olarak bu kuruluma başlamadan önce &lt;a href=&quot;https://www.authy.com/signup&quot;&gt;https://www.authy.com/signup&lt;/a&gt; adresinden üye olmanız ve size verilen &lt;strong&gt;token&lt;/strong&gt; bilgilerini kayıt etmeniz gerekmektedir. Kurulumu başarılı bir şekilde tamamladığınızda sistemlerinize girmek için 2FA doğrulaması yapmanız gerekmektedir.&lt;/p&gt;

&lt;h2 id=&quot;kurulum-lemi&quot;&gt;Kurulum İşlemi&lt;/h2&gt;

&lt;p&gt;Terminalde aşağıdaki komutları yazın:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -O 'https://raw.githubusercontent.com/authy/authy-ssh/master/authy-ssh'
sudo bash authy-ssh install /usr/local/bin
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Ardından, kullanıcı için iki faktörlü kimlik doğrulamayı etkinleştirin:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo /usr/local/bin/authy-ssh enable `whoami` &amp;lt;your-email&amp;gt; &amp;lt;your-country-code&amp;gt; &amp;lt;your-cellphone&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Test yapıyoruz ve her şeyin çalıştığından emin oluyoruz.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;authy-ssh test
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;SSH sunucunuzu yeniden başlatın&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo service ssh restart
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;ssh-sunucunuzu-yeniden-balatma&quot;&gt;Ssh sunucunuzu yeniden başlatma&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Ubuntu&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo service ssh restart
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Debian&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo service sshd restart
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;RedHat and Fedora Core Linux&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo /sbin/service sshd restart
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Suse linux&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo /etc/rc.d/sshd restart
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;root-ayrcalklar-olmadan-kurulum-ilemi&quot;&gt;Root ayrıcalıkları olmadan kurulum işlemi&lt;/h3&gt;

&lt;p&gt;Terminalde aşağıdaki komutları yazın:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl 'https://raw.githubusercontent.com/authy/authy-ssh/master/authy-ssh' -o authy-ssh
bash authy-ssh install ~/.authy-ssh/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Şimdi kullanıcıyı korumak için gerekli komutu girin:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash ~/.authy-ssh/authy-ssh protect
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;bir-kullanc-da-iki-faktrl-kimlik-dorulamay-etkinletirmek&quot;&gt;Bir kullanıcı da iki faktörlü kimlik doğrulamayı etkinleştirmek&lt;/h2&gt;

&lt;p&gt;Kurulum bittikten sonra, korumak istediğiniz kullanıcılar için iki faktörlü kimlik doğrulamayı proaktif olarak etkinleştirmeniz gerekir.&lt;/p&gt;

&lt;p&gt;Kullanıcıları etkinleştirmek için aşağıdaki komutu yazın ve karşınıza çıkacak olan formu doldurun:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo authy-ssh enable
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Tek satırda yapmak isterseniz aşağıdaki komutu vermeniz gerekmektedir:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo authy-ssh enable &amp;lt;local-username&amp;gt; &amp;lt;user-email&amp;gt; &amp;lt;user-cellphone-country-code&amp;gt; &amp;lt;user-cellphone&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;nasl-alr&quot;&gt;Nasıl çalışır&lt;/h2&gt;

&lt;p&gt;Authy-ssh, her girişten önce kendini çalıştırmak için &lt;code class=&quot;highlighter-rouge&quot;&gt;sshd_config&lt;/code&gt; yönergesine ` ForceCommand` kullanmaktadır. Yüklemeyi tamamladıktan sonra sshd_config dosyanızın görünümünü aşağıda görebilirsiniz:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root@ip-10-2-113-233 ~]# cat  /etc/ssh/sshd_config | grep ForceCommand
ForceCommand /usr/local/bin/authy-ssh login
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Authy-ssh her çalıştırıldığında, &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local/bin/authy-ssh.conf&lt;/code&gt; dosyasından yapılandırmaları okuyacaktır.&lt;/p&gt;

&lt;p&gt;Örnek:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root@ip-10-2-113-233 ~]# cat /usr/local/bin/authy-ssh.conf
banner=Good job! You've securely logged in with Authy.
api_key=05c783f2db87b73b198f11fe45dd8bfb
user=root:1
user=daniel:1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Bu durumda kullanıcı rootu ve daniel’in iki faktörlü olduğu ve 1’in  &lt;code class=&quot;highlighter-rouge&quot;&gt;authy_id&lt;/code&gt; olduğu anlamına gelir. Bir kullanıcı bu listede yoksa, &lt;code class=&quot;highlighter-rouge&quot;&gt;authy-ssh&lt;/code&gt; otomatik olarak içeri girmesine izin verir.&lt;/p&gt;

&lt;h2 id=&quot;ki-aamal-kimlik-dorulamasn-otomatik-datm-aralar-ile-kullanma&quot;&gt;İki aşamalı kimlik doğrulamasını otomatik dağıtım araçları ile kullanma.&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;capybara&lt;/strong&gt;, &lt;strong&gt;chef&lt;/strong&gt;, &lt;strong&gt;puppet&lt;/strong&gt;, &lt;strong&gt;cfengine&lt;/strong&gt;, &lt;strong&gt;git&lt;/strong&gt; kullanırsanız, bu araçlarla ilgili yeni kullanıcılar oluşturabilirsiniz; böylece, ikş aşamalı kimlik doğrulamayı kullanabilirsiniz.
Alternatif olarak, &lt;code class=&quot;highlighter-rouge&quot;&gt;ForceCommand&lt;/code&gt; yönergesini kullanarak kullanıcıları eşleştirebilirsiniz.&lt;/p&gt;

&lt;p&gt;Buna iyi bir örnek iki faktörlü bir kullanıcı grubu oluşturmaktır.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;groupadd two-factor
usermod  -a -G two-factor root
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Şimdi benim root kullanıcım iki faktörlü gruba girdiğinde, &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/ssh/sshd_config&lt;/code&gt; dosyamı düzenliyorum&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root@ip-10-2-113-233 ~]# cat /etc/ssh/sshd_config | grep ForceCommand -A 1 -B 1
match Group two-factor
ForceCommand /usr/local/bin/authy-ssh login

service sshd restart
Stopping sshd:                                             [  OK  ]
Starting sshd:                                             [  OK  ]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Şimdi &lt;code class=&quot;highlighter-rouge&quot;&gt;force&lt;/code&gt; komutu yalnızca iki faktörlü gruba ait kullanıcılar üzerinde çalışacaktır.&lt;/p&gt;

&lt;h2 id=&quot;scp-sftp-mosh-ve-git-push-iki-aamal-kimlik-dorulama-kullanm&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Scp&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt; sftp&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;mosh&lt;/code&gt; ve &lt;code class=&quot;highlighter-rouge&quot;&gt;git push&lt;/code&gt; iki aşamalı kimlik doğrulama kullanımı.&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Scp&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt; sftp&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;mosh&lt;/code&gt; ve &lt;code class=&quot;highlighter-rouge&quot;&gt;git clone | fetch | push&lt;/code&gt; gibi etkileşimli olmayan komutları etkinleştirmek için ortam değişkenini &lt;code class=&quot;highlighter-rouge&quot;&gt;AUTHY_TOKEN&lt;/code&gt; istemciden geçirmemize izin vermelisiniz. Bunu yapmak için &lt;code class=&quot;highlighter-rouge&quot;&gt;sshd_config&lt;/code&gt; düzenleyin (normalde&lt;code class=&quot;highlighter-rouge&quot;&gt; /etc&lt;/code&gt; veya &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/ssh/&lt;/code&gt; da bulunur) ve &lt;code class=&quot;highlighter-rouge&quot;&gt;AUTHY_TOKEN&lt;/code&gt; i AcceptEnv yönergesine ekleyin:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;AcceptEnv AUTHY_TOKEN
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Ardından, istemciyi bu değişkeni sunucuya gönderecek şekilde yapılandırabilirsiniz, ilk önce &lt;code class=&quot;highlighter-rouge&quot;&gt;~ /.ssh/config&lt;/code&gt; açıp bunu yapabilir ve aşağıdakileri ekleyebilirsiniz:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Host *
	SendEnv AUTHY_TOKEN
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And finally pass the token before the command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    AUTHY_TOKEN=&quot;valid-token&quot; git push origin master
    AUTHY_TOKEN=&quot;valid-token&quot; scp server:path/to/file local-file
    AUTHY_TOKEN=&quot;valid-token&quot; mosh server
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;not&quot;&gt;NOT&lt;/h3&gt;

&lt;p&gt;Geçersiz bir belirteç girerseniz &lt;code class=&quot;highlighter-rouge&quot;&gt;sftp&lt;/code&gt; gibi durumlarda, &lt;em&gt;“Received message too long 458961713”&lt;/em&gt; gibi bir yanıt alabilirsiniz. Bunun nedeni, etkileşimli komutun, program tarafından döndürülen uygun çıktı, metin mesajını oluşturamamasıdır.&lt;/p&gt;

&lt;h2 id=&quot;ayn-unix-hesab-paylaan-birden-ok-kullanc&quot;&gt;Aynı unix hesabı paylaşan birden çok kullanıcı.&lt;/h2&gt;

&lt;p&gt;Tek bir giriş bilgilerini paylaşmanız gereken birçok kullanıcınız varsa, aynı tokeni paylaşmadan güçlü iki faktörlü kimlik doğrulamasını kullanabilirsiniz. Bu, her kullanıcının kendi reddine izin vermeyecek şekilde kendi Authy Token’ine sahip olabileceği anlamına gelir.&lt;/p&gt;

&lt;p&gt;Bunu başarmak için &lt;code class=&quot;highlighter-rouge&quot;&gt;ForceCommand&lt;/code&gt; yönergesini &lt;code class=&quot;highlighter-rouge&quot;&gt;sshd_config&lt;/code&gt; den silin veya yorumlayın:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo sed -ie 's/^\(ForceCommand.*authy-ssh.*\)/#\1/g' /etc/ssh/sshd_config
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Ve sonra her kişi için aşağıdaki komutu kullanarak ssh anahtarını ekleyin:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo authy-ssh protect
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Bitmiş gibi gözüken bir &lt;code class=&quot;highlighter-rouge&quot;&gt;authorized_keys&lt;/code&gt; dosyası örneğin:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;command=&quot;/usr/local/bin/authy-ssh login 13386&quot; ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDGRJbWu+WLVXYVADY3iQPE1kA7CIOSqHmskPM8qIAzKzq+1eRdmPwDZNmAvIQnN/0N7317Rt1bmTRLBwhl6vfSgL6677vUwsevPo27tIxdja67ELTh55xVLcJ3O8x2qkZsySgkLP/n+w3MUwLe1ht31AZOAsV7J7imhWipDijiysNgvHyeSWsHqExaL1blPOYJVHcqPbKY4SxFRq/MWeyPf/Sm24MFSKEaY6u0kNx8MLJ1X9X/YxmY9rdvzsZdQ7Z/PYhYt2Ja/0mzfYx2leeP2JQBsVfZZzAoFEPpw6mSP9kJREGe2tXvS9cRenhz/+V0+mvSJKG0f0Zzh428pTzN
command=&quot;/usr/local/bin/authy-ssh login 20&quot; ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAyvj2d0rSDukDT04mK7njUxtXffUrOnDCm2Bqub0zN7LQS733nBHp89aMuBI5ENjw1SQ2qXhLxvK1Xhr0pQr+dOWNn3emQjQuiA+YL39yp2RLLpflerJ3KAVY09CHYLFxdKj/DJgXsH+LMAPe2uVmWCP2xAV5ZcLnz3CdS2SX/EVlbNrftesZx9uAbmwKPLY1pmW7q/75AhJRow8VTP7zM/VS7jEHkj03g51BZGB8tMI3G8RDVEDtu2jVwZiq+8BaNCyjYVlsLfu6uGhnXeeUS3swu/atlt+pxy+QTf/HGvrJR58tER+foqheWtV3LqXN4oLckzqTVkDDmnNJlmrpYQ==
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Önceki komut ssh genel anahtarı, cep telefonu ve e-postayı kullanıcıdan isteyecektir.&lt;/p&gt;

&lt;h2 id=&quot;kaldrma&quot;&gt;Kaldırma&lt;/h2&gt;

&lt;p&gt;Aşağıdaki komutların girilmesi halinde sistemden Authy SSH uygulaması tamamen kaldırılacaktır.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo authy-ssh uninstall
sudo service ssh restart
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
                <link>https://mertcangokgoz.com/authy-ssh-ile-sunucu-guvenliginin-arttirilmasi/</link>
                <guid>https://mertcangokgoz.com/authy-ssh-ile-sunucu-guvenliginin-arttirilmasi</guid>
                <pubDate>Thu, 08 Dec 2016 00:00:00 +0300</pubDate>
        </item>

        <item>
                <title>Hortumu Kendilerine Bağladılar(mkfifo, mknod)</title>
                <description>&lt;p&gt;Dikkat her ne kadar &lt;strong&gt;pipe&lt;/strong&gt; olarak bilinsede makalenin gidişatını etkilediği için türkçe bir şekilde boru, borular ve borulama olarak göreceksiniz korkmayın…&lt;/p&gt;

&lt;p&gt;Borular, işlemler arası iletişim için sıklıkla kullanılır. Ancak boruların en büyük dezavantajı, yalnızca bir süreç (aynı süreç içinde okuyucular ve yazarlar var) veya aynı dosya tanımlayıcı tablosunu paylaşan süreçlerdir (normalde işlemler, alt süreçler ve(veya) bunlar tarafından oluşturulan işlemler) kullanılabilir olmasıdır ). Böylece borular büyük bir kısıtlamaya sahit olurlar ilgisiz süreçler arasında bilgi aktaramazlar. Bunun nedeni, aynı dosya tanımlayıcı tablosunu paylaşmamalarıdır.&lt;/p&gt;

&lt;p&gt;Ancak borulara isimler verilirse, normal bir dosya gibi onlarda veri okuyabilir veya yazabilirler. Süreçler, birbirleriyle hiçbir şeyi paylaşmaya bile gerek duymazlar. &lt;strong&gt;FIFO (First In First Out)&lt;/strong&gt; olarak adlandırılmış borular olarak da bilinirler.&lt;/p&gt;

&lt;p&gt;Peki kardeş iyi hoş anlatıyonda FIFO’nun özellikleri neler ne yapabiliyorlar;&lt;/p&gt;

&lt;p&gt;Araştırmalarıma göre aşağıdaki 3 şekilde davranış sergiliyor.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Boruların FIFO özelliğini uygular&lt;/li&gt;
  &lt;li&gt;Adlarını kullanarak normal dosyalar gibi açılabilirler&lt;/li&gt;
  &lt;li&gt;Veri, fifo’dan okunabilir veya fifo’ya yazılabilir&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Peki bunu nasıl yapabiliriz, Enes kardeşim bundan yaklaşık bi 2 hafta önce ya şunu anlayamadım gençler bu ne diyerek gelmişti ufak bi man pages ufak bi profesör gıdıklaması ile ne olduğunu çözdük tabi oldukça mantıklı ve hoş bir durumdu&lt;/p&gt;

&lt;p&gt;Şimdi &lt;code class=&quot;highlighter-rouge&quot;&gt;man mkfifo&lt;/code&gt; diyerek neyin ne olduğuna bakabilirsiniz oldukça basittir. Dosya oluşturmak ve bunun üzerinde çalışma yapabilmek için bir kaç adıma ihtiyaç duyarsınız&lt;/p&gt;

&lt;p&gt;Dosya oluşturma işlemi&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkfifo stream
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;bu aşamada Mknod’u kullanarak FIFO’yu kullanmanın bir başka yolu daha var tabi. Mknod, blok veya karakter özel dosyaları oluşturmak için kullanılır.&lt;/p&gt;

&lt;p&gt;Tabi onda dosya oluşturmak için şu şekilde bir yol izlemeniz gerekir.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mknod stream p
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Burada p, dosya türüne karşılık gelir ve bunu korur. Şimdi gelelim bu dosyalar üzerinde okuma ve yazma işlemi yapmaya genelde bu &lt;code class=&quot;highlighter-rouge&quot;&gt;mknod&lt;/code&gt; ve &lt;code class=&quot;highlighter-rouge&quot;&gt;mkfifo&lt;/code&gt; kafalarını pentest aşamasında kullanıyorlar &lt;code class=&quot;highlighter-rouge&quot;&gt;/tmp/&lt;/code&gt; dizini altına bununla bir dosya oluşturup uzaktan istedikleri kodu çalıştırabiliyorlar &lt;code class=&quot;highlighter-rouge&quot;&gt;cat&lt;/code&gt; ile ekrana basmak falan yetiyor. İlginç ama güzel düşünülmüş bir hareket&lt;/p&gt;

&lt;p&gt;Şimdi bunu denemek için en basitinden 2 adet terminal açmanızı öneriyorum ilkine aşağıdaki komutu verin ve atın bir köşeye cat in açık olduğu satır bildiğiniz gibi deneyimizi yapacağımız ve okuma işlemini gerçekleştireceğimiz terminal&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cat &amp;gt; stream
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;şimdi yapacağımız oldukça değişik olacak niye derseniz bu dosyalar yanlış bilmiyorsam stream dosyaları oluyor. yani bir akış işlemi gerçekleştiriyor. Normalde siz bir dosyaya &lt;code class=&quot;highlighter-rouge&quot;&gt;cat test.txt&lt;/code&gt; gibi bir komut verdiğiniz de &lt;code class=&quot;highlighter-rouge&quot;&gt;test.txt&lt;/code&gt; içeriğini ekrana yazdırıp süreci bitiriyor ancak fifo ile oluşturulmuş dosyalarda bu işlem bu şekilde yürümüyor. Siz ne kadar kayıt veya komut gönderirseniz oda o şekilde davranıyor ve işlemi sonlandırmıyor.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cat stream
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;komutunu gönderdiğinizde sürecin sonlanmadığını anlayacaksınız ve &lt;code class=&quot;highlighter-rouge&quot;&gt;cat &amp;gt; stream&lt;/code&gt; komutunu verdiğiniz terminal içeriğine ne girerseniz diğer terminalde de aynı kayıtların geçtiğini göreceksiniz&lt;/p&gt;

&lt;p&gt;İlk terminalde CTRL + D tuşlarına basmak, fifo’ya yazmayı sonlandıracaktır. Bu aynı zamanda ikinci işlemi de sonlandırır, çünkü fifo’dan okumak artık “BROKEN PIPE” sinyali ile mümkün değildir. Bunun varsayılan eylemi işlemi sonlandırmaktır.&lt;/p&gt;

&lt;p&gt;Peki bu dosyalar herhangi bir dosyadan farklı mı ?&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  File: 'stream'
  Size: 0         	Blocks: 0          IO Block: 4096   stream
Device: 808h/2056d	Inode: 5376186     Links: 1
Access: (0644/prw-r--r--)  Uid: ( 1000/ mertcan)   Gid: ( 1000/ mertcan)
Access: 2016-12-05 20:18:36.755379117 +0300
Modify: 2016-12-05 20:18:36.755379117 +0300
Change: 2016-12-05 20:18:36.755379117 +0300
 Birth: -
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Dikkat ederseniz, FIFO’lar normal bir dosya gibi, inode numarası, bağlantı sayısı, erişim, değiştirme süreleri, boyut ve erişim izinleri gibi tüm ayrıntılara sahiptir yani evet diğer dosyalar ile tamamen aynıdır.&lt;/p&gt;

&lt;p&gt;Bir boru birden çok okuyucu ve yazan kişi olabilir. Bir boruyu okumak ve yazmak için birden fazla terminal açmayı deneyebilirsiniz. Hatta bunu bir takım uygulamalar ile uzaktan yapabilme imkanınız da bulunmaktadır.&lt;/p&gt;
</description>
                <link>https://mertcangokgoz.com/hortumu-kendilerine-bagladilar-mkfifo-mknod/</link>
                <guid>https://mertcangokgoz.com/hortumu-kendilerine-bagladilar-mkfifo-mknod</guid>
                <pubDate>Wed, 07 Dec 2016 00:00:00 +0300</pubDate>
        </item>

        <item>
                <title>Birden Çok Veritabanı Sunucusunu Yönetme ve Denetleme</title>
                <description>&lt;p&gt;HexorBase, merkezi bir konumdan aynı anda birden çok veritabanı sunucusunu yönetmek ve denetlemek için tasarlanmış bir veritabanı uygulamasıdır; ortak veritabanı sunucularına (MySQL, SQLite, Microsoft SQL Server, Oracle, PostgreSQL) karşı SQL sorguları ve kaba kuvvet saldırıları yapabilir.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/haxorbase.png&quot; alt=&quot;haxor gorsel&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Paket yönlendirmeyi, yerel alt ağlar içerisinde gizlenen uzaktan erişilemeyen sunucularla iletişim kurmak için proxy vekilleri için veya Metasploit için izin verir.&lt;/p&gt;

&lt;h2 id=&quot;gerekenler&quot;&gt;Gerekenler&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;python&lt;/li&gt;
  &lt;li&gt;python-qt4&lt;/li&gt;
  &lt;li&gt;cx_Oracle&lt;/li&gt;
  &lt;li&gt;python-mysqldb&lt;/li&gt;
  &lt;li&gt;python-psycopg2&lt;/li&gt;
  &lt;li&gt;python-pymssql&lt;/li&gt;
  &lt;li&gt;python-qscintilla2&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bağımlılıkların kurulması&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install python-qt4 python-mysqldb python-psycopg2 python-pymssql python-qscintilla2
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;cx_Oracle Kurulumu&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip install cx_Oracle
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Uygulama Kurulum&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget https://github.com/savio-code/downloads/raw/master/hexorbase_1.0_all.deb
sudo dpkg -i hexorbase_1.0_all.deb
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Uygulama her ne kadar eski olsa da oldukça işe yarıyor. Özellikle uzaktan yönetmek için hepsinin birleştirilmiş olması benim hoşuma gitti kaba kuvvet saldırıları gibi işler için kullanmanızı önermem ancak yönetim ve denetleme işleri için güzel&lt;/p&gt;
</description>
                <link>https://mertcangokgoz.com/birden-cok-veritabani-sunucusunu-yonetme-ve-denetleme/</link>
                <guid>https://mertcangokgoz.com/birden-cok-veritabani-sunucusunu-yonetme-ve-denetleme</guid>
                <pubDate>Tue, 06 Dec 2016 00:00:00 +0300</pubDate>
        </item>

        <item>
                <title>Greedy Yaklaşımı Aktivite Seçim Problemi</title>
                <description>&lt;p&gt;Aktivite seçimi problemi, her biri bir başlangıç zamanı (s) ve bitiş zamanı (f) ile işaretlenmiş bir dizi faaliyet göz önüne alındığında, belirli bir zaman çerçevesi içinde çelişmeyen faaliyetlerin seçimiyle ilgili bir kombinatoryal optimizasyon problemidir. Sorun, bir kişinin bir seferde tek bir etkinlikte çalışabileceğini varsayarak, tek bir kişi veya makine tarafından gerçekleştirilebilecek maksimum etkinlik sayısını seçmektir.&lt;/p&gt;

&lt;p&gt;Optimizasyon problemlerinin önüne geçmek için sıkça kullanılan algoritmalardır. Her zaman en bariz ve anında fayda sağlayan bir sonraki parçayı seçer.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;malloc.h&amp;gt;


void ActivitySelection(int *s, int *f, int n, int *sol)
{
	sol[0] = 0;

	int i, c = 0;
	for(i = 1; i &amp;lt; n; i++)
		if(f[sol[c]] &amp;lt;= s[i])
			sol[++c] = i;

	sol[++c] = -1;
}


void main()
{
	int s[] =  {1, 3, 0, 5, 8, 5};
    int f[] =  {2, 4, 6, 7, 9, 9};
    int n = sizeof(s)/sizeof(s[0]);

    int *sol = malloc(sizeof(int)*n);
    ActivitySelection(s, f, n, sol);

    int i;
    for(i = 0; sol[i] != -1; i++)
    	printf(&amp;quot;%d\t%d\t%d\n&amp;quot;, sol[i], s[sol[i]], f[sol[i]]);
}&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/MertcanGokgoz/6620972535cb7e4c65d701c25329d36c.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;Her biri bir başlangıç zamanı s ve bitiş zamanı f ile temsil edilen n aktivite bulunduğunu varsayalım. &lt;code class=&quot;highlighter-rouge&quot;&gt;S ≥ f&lt;/code&gt; veya &lt;code class=&quot;highlighter-rouge&quot;&gt;s ≥ f&lt;/code&gt; ise iki etkinlik i ve j’nin çelişkili olmadığı söylenir. Aktivite seçim problemi, çelişkili olmayan faaliyetlerin maksimum çözüm setini (S) bulmaktan ibarettir veya daha kesin bir ifadeyle, &lt;code class=&quot;highlighter-rouge&quot;&gt;|S'| &amp;gt; |S|&lt;/code&gt; Birden fazla maksimal çözümün eşit ebatlara sahip olması durumundadır..&lt;/p&gt;
</description>
                <link>https://mertcangokgoz.com/greedy-yaklasimi-aktivite-secim-problemi/</link>
                <guid>https://mertcangokgoz.com/greedy-yaklasimi-aktivite-secim-problemi</guid>
                <pubDate>Sun, 04 Dec 2016 00:00:00 +0300</pubDate>
        </item>

        <item>
                <title>Log4j Rotate Sorununu Çözme</title>
                <description>&lt;p&gt;Yazın Staj yaparken iş kayıtlarıma log4j de bir sorun olduğu ve uygulama loglarının rotate olmayıp sistemi şişirdiğini ve sorunlara neden olduğu yazıyordu. Kolay bir şekilde çözebileceğimizi düşündüm ancak işin içinde java olduğu için xml vs uğraşmak zorunda kaldım biraz yeni gördüğüm bir uygulama olduğu içinde her ne kadar zorlansamda aşağıdaki şekilde sorunu çözmeyi başardım.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;log4j.rootLogger=INFO, loggerId
log4j.appender.loggerId=org.apache.log4j.rolling.RollingFileAppender
log4j.appender.loggerId.rollingPolicy=org.apache.log4j.rolling.TimeBasedRollingPolicy
log4j.appender.loggerId.rollingPolicy.ActiveFileName=worker.log
log4j.appender.loggerId.rollingPolicy.FileNamePattern=worker-.%d{yyyyMMdd}.log.gz
log4j.appender.loggerId.layout=org.apache.log4j.PatternLayout
log4j.appender.loggerId.layout.ConversionPattern=%d [%t] %-5p (%F:%L) - %m%n
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Log kurallarına yukarıda ki satırları ekliyorsunuz servisleri yeniden başlattığınızda ise sorun çözülmüş oluyor tabi günlük rolling yapılacağı için olup olmadığını anlama konusunda beklemeniz gerekiyor.&lt;/p&gt;
</description>
                <link>https://mertcangokgoz.com/log4j-log-rotate-sorunu-ve-cozumu/</link>
                <guid>https://mertcangokgoz.com/log4j-log-rotate-sorunu-ve-cozumu</guid>
                <pubDate>Wed, 30 Nov 2016 00:00:00 +0300</pubDate>
        </item>

        <item>
                <title>Hybrid fibre-coaxial Nedir ?</title>
                <description>&lt;p&gt;Hybrid fiber-koaksiyel (HFC), optik fiber ve koaksiyel kabloyu birleştiren bir geniş bant ağı için bir telekomünikasyon endüstrisi terimidir. 1990’lı yılların başından beri yaygın olarak kablo televizyon operatörleri tarafından küresel olarak kullanılmaktadır.&lt;/p&gt;

&lt;p&gt;Hybrid bir fiber koaksiyal kablo sisteminde televizyon kanalları, kablo sisteminin dağıtım merkezinden, headend, fiber optik hatları vasıtasıyla yerel topluluklara gönderilir. Yerel toplulukta optik bir düğüm olarak adlandırılan bir kutu, sinyali bir ışık ışınından elektrik sinyaline çevirir ve onu abone konutlarına dağıtmak için koaksiyel kablo hatlarını kullanır. Fiber optik iç hatları, gelecekte genişleme ve yeni bant genişliği yoğun hizmetler sağlamak için yeterli bant genişliği sağlar.&lt;/p&gt;

&lt;p&gt;Fiber optik ağı, kablo operatörlerinin ana istasyonundan bazen bölgesel ön uçlara ve dışarıda bir mahalle hub’ına ve nihayet 25 ila 2000 ev arasında herhangi bir yere hizmet veren bir koaksiyel kablo düğümüne kadar uzanmaktadır. Bir ana istasyonda genellikle uzaktaki video sinyallerinin yanı sıra IP toplama yönlendiricileri için uydu antenleri bulunur. Bazı ustalar, topluluğa telekomünikasyon hizmetleri sağlamak için telefon ekipmanı da barındırıyorlar.&lt;/p&gt;

&lt;p&gt;Bir bölgesel veya alan headend/hub, ana başlıktan gelen video sinyalini alacak ve yerel franchising yetkililerinin gerektirdiği şekilde kamu, eğitim ve devlet erişimi (PEG) kablo TV kanallarını ekleyecek veya yerel bir bölgeye hitap edecek hedefli reklamcılık alanı ekleyecektir. Çeşitli hizmetler kodlanmış, modüle edilmiş ve tek bir elektrik sinyali üzerine birleştirilen ve geniş bantlı bir optik vericiye yerleştirilen radyo frekansı (RF) taşıyıcılarına dönüştürülmüştür.&lt;/p&gt;

&lt;p&gt;Bu optik verici, elektrik sinyalini düğümlere gönderilen Downstream olarak modüle edilmiş bir sinyale dönüştürür. Fiber optik kablolar, uçtan uca veya hub noktadan noktaya veya star topolojisin de veya bazı durumlarda korumalı bir ring topolojisin de optik düğümlere bağlar.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/HFC-network-diagram.jpg&quot; alt=&quot;hfc-network-diagramı&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;fiber-optik-dmler&quot;&gt;Fiber optik düğümler&lt;/h3&gt;

&lt;p&gt;Fiber optik bir düğümün, geniş bantlı bir optik alıcısı vardır; bu alıcı, headend veya hub’tan gelen Downstream optik olarak modüle edilmiş sinyali evlere giden bir elektrik sinyaline çevirir. 2015 yılından itibaren, Downstream sinyali, tipik olarak 50 MHz’de başlayan ve üst ucunda 550-1000 MHz aralığında değişen RF modüle edilmiş bir sinyaldir. Fiber optik düğüm ayrıca, evden başlığa geri iletişimi gönderen bir ters veya dönüş yolu vericisi içerir.&lt;/p&gt;

&lt;p&gt;Kuzey Amerika’da bu ters sinyal, 5-42 MHz arasında değişen, dünyanın diğer yerlerinde 5-65 MHz aralığında değişen bir RF modülasyonudur. Optik alıcı ile birleştirilen optik birleştirici bir düğüm oluşturur&lt;/p&gt;

&lt;p&gt;Ağın optik kısmı büyük miktarda esneklik sağlar. Düğüm için çok sayıda fiber optik kablo yoksa, dalga boyu bölmeli çoğullama, birden fazla optik sinyali aynı fiber üzerine birleştirmek için kullanılabilir. Optik filtreler, optik dalga boylarını tekli fiber üzerine birleştirmek ve bölmek için kullanılır.&lt;/p&gt;

&lt;p&gt;Örneğin, Downstream 1490 nm’de bir dalga boyunda olabilir ve dönüş sinyali 1310 nm’de bir dalga boyunda olabilir.&lt;/p&gt;

&lt;h3 id=&quot;mterilere-nihai-balant&quot;&gt;Müşterilere nihai bağlantı&lt;/h3&gt;

&lt;p&gt;Ağın koaksiyel kısmı, düğümün ağaç ve dal konfigürasyonunda 25-2000 ev (500 tipik) bağlar. RF amplifikatörleri, koaksiyel kabloyu bölme veya “tıkama” nedeniyle elektrik sinyallerinin pasif kayıplarını ve kablo zayıflamasını yenmek için aralıklarla kullanılır.&lt;/p&gt;

&lt;p&gt;Gövde koaksiyel kabloları optik düğüme bağlanır ve küçük dağıtım kablolarının bağlandığı bir koaksiyel omurga oluşturur. Gövde kabloları, genellikle bir güç kaynağı (bir kurşun asit yedek pil içeride bulunur) ve bir güç yerleştirici tarafından, genellikle 60 veya 90 V’de kablo hattına eklenen AC gücünü taşır. Güç, kablo hattına eklenerek optik düğümler, gövde ve dağıtım amplifikatörlerinin bireysel, harici bir güç kaynağına ihtiyacı yok.&lt;/p&gt;

&lt;p&gt;Güç kaynağının yerel güç şirketi yönetmeliklerine bağlı olarak yanında bir güç ölçeri olabilir.&lt;/p&gt;

&lt;p&gt;Gövde kablolarından daha küçük dağıtım kabloları, RF sinyalini ve AC gücü bireysel caddelerde taşımak için gövde amplifikatörünün bir portuna bağlanır. Gerekirse, daha küçük dağıtım yükselticiler olan çizgi genişleticiler, televizyon sinyalinin gücünü TV’nin kabul edebileceği bir seviyede tutmak için sinyalleri artırır. Dağıtım hattı daha sonra “damlatılarak” yerleştirilir ve bireysel damlaları müşteri evlerine bağlar.&lt;/p&gt;

&lt;p&gt;Bu bağlantı, RF sinyalini iletir ve koaksiyel güç sistemi tarafından sağlanan yedek güç güvenilirliğine ihtiyaç duyan telefon cihazları yoksa AC gücünü bloke eder. bağlantı bir F konnektörü olarak bilinen standart bir vida tipi konnektör kullanarak küçük bir koaksiyel damla içine sona erer.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/hfc-gorsel2.jpg&quot; alt=&quot;hfc-gorsel2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Damla daha sonra, toprak bloğunun sistemi gerilimden koruyan eve bağlanır. Şebeke tasarımına bağlı olarak, sinyal bir splitter üzerinden birden fazla TV’ye aktarılabilir. Birden çok TV’ye bağlanmak için çok sayıda bölücü kullanılıyorsa, sinyal seviyeleri düşecek ve bu bölücüleri aşan TV’lerin analog kanallarındaki görüntü kalitesi, “damla” veya “ev” amplifikatörünün kullanılmasını gerektiriyor veya daha da kabaca, çoklu Aynı binaya düşer.&lt;/p&gt;

&lt;h3 id=&quot;hfc-ebekesi-zerinden-tama&quot;&gt;HFC şebekesi üzerinden taşıma&lt;/h3&gt;

&lt;p&gt;Frekans bölmeli çoğullamayı kullanarak, bir HFC şebekesi, analog TV, dijital TV (SDTV veya HDTV), isteğe bağlı video, telefon ve yüksek hızlı veriler de dahil olmak üzere çeşitli servisleri taşıyabilir. Bu sistemlerdeki servisler 5 MHz ila 1000 MHz frekans bandında radyo frekansı (RF) sinyalleriyle taşınır.&lt;/p&gt;

&lt;p&gt;HFC şebekesi tipik olarak iki yönlü olarak çalıştırılır, yani sinyallerin aynı ağdaki iki yöne, ana istasyondan merkeze, eve ve evden headend / hub’a taşınması anlamına gelir. İleriye doğru yol veya Downstream sinyaller, video içeriği, ses ve İnternet verileri gibi headend / merkez ofisinden eve bilgi taşıyor. İlk HFC şebekeleri ve çok eski yeniden kurulmamış HFC şebekeleri yalnızca tek yönlü sistemlerdir. Tek yönlü sistemler için ekipman, kulaklık ile iletişim kurmak için POTS veya radyo ağlarını kullanabilir.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/hfc-gorsel3.jpg&quot; alt=&quot;hfc-gorsel3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Geri dönüş yolu veya Upstream sinyalleri, bir film veya İnternet verisinin bir e-posta göndermek üzere sipariş vermek için kontrol sinyallerinin olduğu gibi evden headend / hub’a bilgi taşır. İleri yol ve dönüş yolu aslında optik düğüm ve ev arasında her iki yönde aynı koaksiyel kablo üzerinden taşınır.&lt;/p&gt;

&lt;p&gt;Sinyallerin karışmasını önlemek için, frekans bandı iki bölüme ayrılmıştır. Geleneksel olarak NTSC Sistem M kullanan ülkelerde, bölümler ileri yol sinyalleri için 52-1000 MHz ve dönüş yolu sinyalleri için 5-42 MHz’dir. Diğer ülkeler farklı bant boyutlarını kullanıyor ancak upstream iletişim yerine downstream iletişim için daha fazla bant genişliği olması açısından benzerdir.&lt;/p&gt;

&lt;p&gt;Geleneksel olarak, video içeriği yalnızca eve gönderildiğinden, HFC ağı asimetrik olarak yapılandırılmıştır: bir yönde, diğer yöne göre çok daha fazla veri taşıma kapasitesi vardır. Geri dönüş yolu başlangıçta sadece çok düşük bant genişliği gerektiren film, vb sipariş etmek için bazı kontrol sinyallerinde kullanılıyordu. Internet erişimi ve telefon gibi ek hizmetler HFC şebekesine eklenince, dönüş yolu daha çok kullanılıyor.&lt;/p&gt;

&lt;h3 id=&quot;oklu-sistem-operatrleri&quot;&gt;Çoklu sistem operatörleri&lt;/h3&gt;

&lt;p&gt;Çoklu sistem operatörleri (MSO’lar) çeşitli hizmetleri fiber optik ve koaksiyal bakır kablolar üzerinde RF sinyalleri üzerinden gönderme yöntemleri geliştirdi. HFC şebekesi üzerinden video aktarmak için asıl yöntem ve halen en yaygın kullanılan yöntem, havadaki yayın iletimi için kullanılan metoda benzer şekilde standart analog TV kanallarının modülasyonudur.&lt;/p&gt;

&lt;p&gt;Bir analog TV kanalı, NTSC tabanlı sistemlerde 6 MHz genişliğinde bir frekans bandı veya PAL veya SECAM tabanlı sistemlerde 8 MHz genişliğinde bir frekans bandı barındırır. Her kanal, bitişik veya harmonik kanallar ile herhangi bir etkileşim olmaması için belirli bir frekans taşıyıcıya ortalanır. Dijital olarak modüle edilmiş bir kanal, ev veya müşteri-tesis ekipmanları (CPE), örneğin; Dijital televizyonlar, bilgisayarlar veya set üstü kutular, RF sinyallerini analog televizyonlar veya bilgisayar monitörleri gibi görüntüleme aygıtlarıyla uyumlu sinyallere dönüştürmek için gereklidir.&lt;/p&gt;

&lt;p&gt;ABD Federal Haberleşme Komisyonu (FCC), tüketicilerin dijital kanalları izlemek için yetkilendirmek için yerel MSO’dan bir kablo kartı alabileceğine karar verdi.&lt;/p&gt;

&lt;p&gt;Dijital sıkıştırma tekniklerini kullanarak birden fazla standart ve yüksek tanımlı TV kanalı bir 6 veya 8 MHz frekans taşıyıcı üzerinde taşınabilir, böylece HFC ağının kanal taşıma kapasitesini tüm analog ağa oranla 10 kat veya daha fazla arttırır.&lt;/p&gt;

&lt;h3 id=&quot;rekabeti-a-teknolojileri&quot;&gt;Rekabetçi ağ teknolojileri&lt;/h3&gt;

&lt;p&gt;Dijital abone hattı (DSL), geleneksel telefon şirketleri tarafından bükümlü çift bakır telefon kablolarında gelişmiş hizmetler (yüksek hızlı veri ve bazen video) sunmak için kullanılan bir teknolojidir. Genellikle HFC şebekelerinden daha düşük veri taşıma kapasitesine sahiptir ve veri hızları, hat uzunlukları ve kalitesi ile aralıklarla sınırlandırılabilir.&lt;/p&gt;

&lt;p&gt;Uydu televizyonu, yayın video servislerinin sunumunda HFC şebekeleri ile çok iyi rekabet eder. Etkileşimli uydu sistemleri, büyük gidiş-dönüş gecikmelerinden ötürü kentsel çevrelerde daha az rekabetçi olmakla birlikte, kırsal alanlarda ve dağınık karasal altyapı yetersiz ya da hiç olmayan diğer ortamlarda caziptir.&lt;/p&gt;

&lt;p&gt;HFC’ye benzer şekilde, fiber in loop (FITL) teknolojisi telefonla yerel değişim taşıyıcıları tarafından, düz eski telefon servisi (POTS) yerel döngü üzerinden telefon müşterilerine gelişmiş hizmetler sağlamak için kullanılır.&lt;/p&gt;

&lt;p&gt;2000’li yıllarda, telekom şirketleri kablolu operatörler ile rekabet etmek için video, veri ve ses sunmak için pasif optik ağ çözümleri gibi x’e (FTTX) önemli bir fiber dağıtımı yapmaya başladı. Bunlar dağıtmak pahalı olabilir, ancak özellikle veri hizmetleri için geniş bant genişliği kapasitesi sağlayabilirler.&lt;/p&gt;

&lt;h3 id=&quot;avantajlar&quot;&gt;Avantajları&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Maliyet - Gerekli daha az amplifikatör sayesinde daha az bakım maliyeti. Aynı zamanda koaksiyalden daha az elektriğe, daha düşük maliyet anlamına gelir.&lt;/li&gt;
  &lt;li&gt;Güvenilirlik - Güvenilir, gürültüye ve neredeyse varolmayan zayıflamaya (bozulma) karşı korunmuştur.&lt;/li&gt;
  &lt;li&gt;Bant genişliği - Geleneksel CaTV ağından (330MHz veya 450MHz’e kadar), HFC ile 750MHz’e kadar artan yüksek bant genişliği özellikleri.&lt;/li&gt;
  &lt;li&gt;Esneklik - Var olan operasyonel parametreleri değiştirmeden ses, veri veya video gibi yeni hizmetlere uyum yeteneğine sahiptir (TE Consulting)&lt;/li&gt;
  &lt;li&gt;Boyut - Aynı bant genişliğine sahip bakır kablolardan daha hafif ve daha incedir: Yeraltı kablolama kanallarında çok daha az alan gereklidir ve montaj mühendisleri tarafından işlenmesi daha kolaydır.&lt;/li&gt;
  &lt;li&gt;Güvenlik - Bilinmeyen bilgilerin girilmesi çok daha zor; Bankalar ve güvenlik tesisatları için büyük bir avantaj. Radyo sinyallerinden, otomobil ateşleme sistemlerinden, şimşek vb. Elektromanyetik parazitlerden etkilenmez. Patlayıcı veya yanıcı atmosferlerde güvenle yönlendirilebilir.&lt;/li&gt;
  &lt;li&gt;Teknoloji Desteği - Kablolu telefonları, artan sayıda CaTV kanalını (200’den fazla), ağların HFC omurgalarını ve ATM hizmetlerini kullanacağını varsayan yeni Dijital TV standartlarını doğrudan destekler.&lt;/li&gt;
  &lt;li&gt;Kullanılabilirlik - Ayrı bir bağlantı kullandığı için telefon hattını çevirmeli bağlamaya gerek yok, Kablo İnternet’in sürekli bağlantısı var.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;dezavantajlar&quot;&gt;Dezavantajları&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Maliyet - Koaksiyel Kablo’dan daha pahalı, özellikle uzun kablolar nedeniyle kırsal abonelere pahalı.&lt;/li&gt;
  &lt;li&gt;Güvenilirlik - Bir fiberin destekleyeceği çok sayıda kullanıcı nedeniyle, bir trenin raydan çıkması, deprem ya da diğer travmatik felaket boyutlarına bile sahip olabilir.&lt;/li&gt;
  &lt;li&gt;Gerekli Beceri - Optik fiberler, bakır kablo kadar kolay birleştirilebilir (birbirine yapıştırılamaz) ve ek personel eğitimi ve pahalı hassas ekleme ve ölçüm ekipmanları gerektirir.&lt;/li&gt;
  &lt;li&gt;Simetri - Asimetrik, yeni interaktif multimedya temelli değil.&lt;/li&gt;
  &lt;li&gt;Sinyal Kalitesi - Daha fazla abone ağı kullandıkça azaltılır. İletimlerin hızı da düşer.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Kaynak: https://en.wikipedia.org/wiki/Hybrid_fibre-coaxial ve http://services.eng.uts.edu.au/~kumbes/ra/Access-Networks/hfc/cnethfc.htm&lt;/p&gt;
</description>
                <link>https://mertcangokgoz.com/hybrid-fibre-coaxial-nedir/</link>
                <guid>https://mertcangokgoz.com/hybrid-fibre-coaxial-nedir</guid>
                <pubDate>Mon, 28 Nov 2016 00:00:00 +0300</pubDate>
        </item>

        <item>
                <title>Javascript ile Beni Unutma Yapalım</title>
                <description>&lt;p&gt;Gene bir gün öyle normal bir şekilde oturuyorum google’nin bir sitesinde gözüme bir şey ilişti belli bir süre tarayıcıda aynı tab da olmadığınızda &lt;strong&gt;title&lt;/strong&gt; değişiyor. ve Beni unutma, işte buradayım falan gibi şeyler yazmaya başlıyor. Bir an dedim ne oluyoruz ama sonradan araştırınca böyle bir özelliğin olduğunu fark ettim.&lt;/p&gt;

&lt;p&gt;Araştırmalarım sonucunda aşağıdaki gibi güzel bir kod çıktı ortaya mevzu tab değişince focus diye bir olay tetiklenmesi yani üzerine gelindiğinde aktif olması başka tab lar da gezdiğinizde ise blur olarak geçiyor ve &lt;strong&gt;title&lt;/strong&gt; değiştiriliyor. yani &lt;strong&gt;Focus&lt;/strong&gt; bir yere odaklanınca işlem yapmak için kullanılıyor. &lt;strong&gt;Blur&lt;/strong&gt; ise odaklanma işlemini sonlandırdığınızda her hangi bir işlem yaptırmak için kullanılıyor.&lt;/p&gt;

&lt;p&gt;İsterseniz adama küfür edin istersenizde “Beni Unutma” şeklinde bir şeyler yazın ziyaretçi bakar mı bilmiyorum ama özellik güzel&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;script src=&quot;https://code.jquery.com/jquery-1.12.4.min.js&quot; charset=&quot;utf-8&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
$(function() {
      var message = &quot;Beni Unutma :(&quot;;
      var original;

      $(window).focus(function() {
          if (original) {
              document.title = original;
          }
      }).blur(function() {
          var title = $('title').text();
          if (title != message) {
              original = title;
          }
          document.title = message;
      });
});
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Bu koda isterseniz bir tanımlama yaparak işte adam tabı unuttuktan 2 dk sonra &lt;strong&gt;title&lt;/strong&gt; değiştir gibi şeyleri ekleyebilirsiniz. &lt;code class=&quot;highlighter-rouge&quot;&gt;timeout&lt;/code&gt; vermeniz her türlü yetecektir.&lt;/p&gt;
</description>
                <link>https://mertcangokgoz.com/javascript-ile-beni-unutma-yapalim/</link>
                <guid>https://mertcangokgoz.com/javascript-ile-beni-unutma-yapalim</guid>
                <pubDate>Sun, 27 Nov 2016 00:00:00 +0300</pubDate>
        </item>

        <item>
                <title>Ubuntu Vm Üzerine Laravel Framework Kurulumu</title>
                <description>&lt;p&gt;Sanal makine üzerine testler için Laravel Framework kuralım dedik olay oldukça basit normalde ben debian yada centos kullanırım ama bu sefer elimde her iki işletim sisteminin isosu yoktu elimizde hazır ubuntu varken kuralım dedik&lt;/p&gt;

&lt;p&gt;PHP kuralım&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo add-apt-repository ppa:ondrej/php
sudo apt-get update
sudo apt-get install php5.6
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Hemen ardından composer kardeşi kuralım&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -sS https://getcomposer.org/installer | php
sudo mv composer.phar /usr/local/bin/composer
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Composer eşliğinde Laravel kurulumumuzu gerçekleştirelim ve &lt;strong&gt;.bashrc&lt;/strong&gt; dosyasına aşağıda vermiş olduğum PATH ekleyelim&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;composer global require &quot;laravel/installer&quot;
export PATH=&quot;$PATH:$HOME/.composer/vendor/bin&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Geliştirme ortamımız için Apache ve gerekli olanları kuralım&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install apache2 libapache2-mod-php5
sudo apt-get install git
sudo apt-get install zip
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Tasksel aracılığı ile LAMP kuralım&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install tasksel
sudo tasksel install lamp-server
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Modları aktif edelim ve apacheyi yeniden başlatalım&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo phpenmod mcrypt
sudo phpenmod mbstring
sudo a2enmod rewrite
sudo systemctl restart apache2
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Komut satırından SQL kullanabilirsiniz ama bu canınızı sıkıyor ise bunun yerine &lt;strong&gt;phpmyadmin&lt;/strong&gt; de kurabilirsiniz&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install phpmyadmin
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Daha sonradan güncelleme için komut veriyoruz. &lt;code class=&quot;highlighter-rouge&quot;&gt;composer update --no-scripts&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;ve gerekli olan diğer php kütüphanelerini ekliyoruz&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install php5.6-mbstring
sudo apt-get install php5.6-xml
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Bundan sonra ihtiyacınız olan &lt;strong&gt;.env&lt;/strong&gt; uzantılı dosya oluşturmak ve laravel projenizi güzelce kullanmak başka yapacağınız bir şey kalmıyor.&lt;/p&gt;
</description>
                <link>https://mertcangokgoz.com/ubuntu-vm-uzerine-laravel-framework-kurulumu/</link>
                <guid>https://mertcangokgoz.com/ubuntu-vm-uzerine-laravel-framework-kurulumu</guid>
                <pubDate>Sat, 26 Nov 2016 00:00:00 +0300</pubDate>
        </item>

        <item>
                <title>Carrier-Grade NAT Nedir ?</title>
                <description>&lt;p&gt;Büyük ölçekli NAT (LSN) olarak da bilinen Carrier-grade NAT (CGN), son sitelerin, özellikle konut ağlarının, genel ağa IPv4 adreslerine çevrilen özel ağ adresleriyle yapılandırıldığı, &lt;strong&gt;IPv4&lt;/strong&gt; ağ tasarımına ait bir yaklaşımdır.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Middlebox&lt;/strong&gt;(Trafiği, paket iletme dışında başka amaçlarla dönüştüren, denetleyen, filtreleyen ya da başka türlü yöneten bir ağ cihazı) ağ adres çeviricisi cihazlarını ağ operatörünün ağına gömülür ve pek çok son site arasında ortak adreslerin küçük havuzlarının paylaşılmasına izin verir. Bu, NAT işlevini ve yapılandırmasını müşteriden İnternet servis sağlayıcı ağına kaydırır.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/CGN-IPv4.jpg&quot; alt=&quot;cgn ipv4 gorsel&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Carrier-grade NAT&lt;/strong&gt;, IPv4 adres tükenmesinin hafifletilmesi için bir yaklaşım olarak önerildi.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Carrier-grade NAT&lt;/strong&gt;‘ın eleştirmenleri aşağıdaki hususları savunuyor;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;NAT’ın herhangi bir biçimi gibi, uçtan-uca ilkesine son verir&lt;/li&gt;
  &lt;li&gt;Durumlu olmasından ötürü, ölçeklenebilirlik ve önemli güvenilirlik sorunları vardır&lt;/li&gt;
  &lt;li&gt;Adreslerin tercümesi kaydedilmezse, kolluk kuvvetleri işlemleri için kayıt tutma işlemini daha zor hale getirir.&lt;/li&gt;
  &lt;li&gt;Hizmetleri barındırmanın imkansız olmasını sağlar.&lt;/li&gt;
  &lt;li&gt;Web barındırma gibi genel bir IP adresi gerektiğinde IPv4 adres tükenme sorununu çözmez.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CGN’nin bir kullanım senaryosu &lt;strong&gt;NAT444&lt;/strong&gt; olarak tanımlanabilir, çünkü bazı müşterilerin kamu sunucularına olan bağlantıları üç farklı &lt;strong&gt;IPv4&lt;/strong&gt; adresleme alanından geçecektir; müşterinin kendi özel ağı, operatörün özel ağı ve kamusal İnternet ortamı&lt;/p&gt;

&lt;p&gt;Bir başka CGN senaryosu, taşıyıcının ağının IPv6 kullandığı ve bu nedenle yalnızca iki IPv4 adresleme alanına ihtiyaç duyulan Dual-Stack Lite’dır.&lt;/p&gt;

&lt;h2 id=&quot;paylalan-adres-alan&quot;&gt;Paylaşılan adres alanı&lt;/h2&gt;

&lt;p&gt;Bir &lt;strong&gt;ISS&lt;/strong&gt;(İnternet Servis Sağlayıcısı), bir CGN dağıttığında ve müşterilerini numaralandırmak için RFC 1918 adres alanını kullanıyorsa, müşteride bulunan donanım zaten RFC 1918 alanını kullanmanın durmasına neden olur. Bunun nedeni, aynı adreslerin hem ağ ara birimlerin içinde hem de dışında kullanılması durumunda yönlendirme ve NAT’ın çalışmamasıdır.&lt;/p&gt;

&lt;p&gt;Bu, bazı İSS’lerin CGN’ler için yeni özel adres alanı tahsis etmek için &lt;strong&gt;ARIN&lt;/strong&gt; içinde politika geliştirmelerini sağlamıştır, ancak ARIN, konunun tipik bir tahsis olmadığı, teknik amaçlı bir rezervasyon olduğunu (RFC 2860’a göre) gösteren politikayı uygulamadan önce IETF(Internet Mühendisliği Görev Gücü)’yi ertelemiştir.&lt;/p&gt;

&lt;p&gt;IETF, ISP CGN dağıtımlarında hem gelen hem de giden ara yüzlerde aynı adresleri işleyebilen NAT aygıtlarında kullanılmak üzere &lt;strong&gt;Paylaşılan Adres Alanını&lt;/strong&gt; ayrıntılandıran RFC 6598’i oluşturdu. ARIN, bu tahsisat için ihtiyaç duyduğu şekilde IANA’ya yer değiştirdi.&lt;/p&gt;

&lt;p&gt;Ayrılan ve kullanılan adres bloğu 100.64.0.0/10’ oldu. Böylelikle özel ip adreslerini dışarıya açmış oldular.&lt;/p&gt;

&lt;h2 id=&quot;sorunlar&quot;&gt;Sorunlar&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Bir IPv4 adresinin herkese açık olup olmadığını anlamaya çalışan aygıtlar veya yazılımlar, yeni alanı tanımak için güncellenmelidir aksi taktirde açık veya kapalı olduğunu anlayamazlar.&lt;/li&gt;
  &lt;li&gt;NAT aygıtları için daha fazla özel IPv4 adres alanı atamak, IPv6’ya geçiş sürecini uzatabilir.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;dezavantajlar&quot;&gt;Dezavantajları&lt;/h3&gt;

&lt;p&gt;Carrier-grade NAT, genellikle ISS müşterilerinin port yönlendirme özelliğini kullanmasını engeller, çünkü ağ adresi çevirisi (NAT) genellikle ağdaki NAT aygıtlarının bağlantı noktalarını harici ara birimdeki diğer bağlantı noktalarına eşleyerek gerçekleştirilir.&lt;/p&gt;

&lt;p&gt;Bu, yönlendiricinin yanıtları doğru cihaza eşleyeceği şekilde yapılır; Carrier-grade NAT ağlarında, tüketici tarafındaki yönlendirici port yönlendirmesi için yapılandırılmış olmasına rağmen, CGN’yi çalıştıran ISS’nin “ana yönlendiricisi”, bu bağlantı noktasını iletmeyi engeller çünkü gerçek port müşterinin ayarladığı port değildir. Eski dezavantajın üstesinden gelmek için, Port Kontrol Protokolü (PCP) RFC 6887’de standartlaştırılmıştır.&lt;/p&gt;

&lt;p&gt;Buna ek olarak, nadir bulunan durumlarda IP adreslerine dayanan bir yasak söz konusu olabilir;&lt;/p&gt;

&lt;p&gt;Örneğin Wikipedia, spam kullanan bir kullanıcıyı temsil eden IP adresini yasaklayarak kullanıcıyı engelleyebilir. Bu kullanıcı operatör sınıfı NAT’ın gerisinde kalırsa, aynı genel IP’yi kullanan spamcı ile paylaşan diğer kullanıcıları yanlışlıkla engeller.&lt;/p&gt;

&lt;p&gt;Kaynak: https://en.wikipedia.org/wiki/Carrier-grade_NAT&lt;/p&gt;
</description>
                <link>https://mertcangokgoz.com/carrier-grade-nat-nedir/</link>
                <guid>https://mertcangokgoz.com/carrier-grade-nat-nedir</guid>
                <pubDate>Thu, 24 Nov 2016 00:00:00 +0300</pubDate>
        </item>

        <item>
                <title>DNSCrypt ve Unbound kullanarak DNS Trafiğini Şifrelemek</title>
                <description>&lt;p&gt;Günlerden bir gün bu arkadaşınız demiş benim DNS sorgularım niye plaintext olarak yapılıyor. Başlamış düşünmeye demiş ben bunu şifreleyim de dış mihraklar göremesin hemen aşağıdaki adımları sırasıyla uygulamış ve bu arkadaş artık mutluymuş. Ama bu işlemleri aşağıdaki müzik eşliğinde yapıyormuş ve bu onun hoşuna gidiyormuş&lt;/p&gt;

&lt;iframe width=&quot;640&quot; height=&quot;360&quot; src=&quot;https://www.youtube-nocookie.com/embed/783-HfoDahI&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Müzik eşliğinde aşağıdaki adımları uyguluyorsunuz.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apt-get install unbound dnscrypt-proxy
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;uygulama kurulumlarımız artık tamam sıra geldi konfigürasyonları tamamlamaya ilk olarak &lt;code class=&quot;highlighter-rouge&quot;&gt;dnscrypt-proxy&lt;/code&gt; uygulamasını kurcalıyoruz.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mertcan@0x2e88ce4:~/Desktop$ cat /etc/default/dnscrypt-proxy 
# What local IP the daemon will listen to, with an optional port.
# The default port is 53. If using systemd, this is not used and must be
# specified in dnscrypt-proxy.socket.
DNSCRYPT_PROXY_LOCAL_ADDRESS=127.0.0.31:53

# Remote DNS(Crypt) resolver.
# You can find a list of resolvers at
# /usr/share/dnscrypt-proxy/dnscrypt-resolvers.csv.
DNSCRYPT_PROXY_RESOLVER_NAME=cisco

# Extra flags to pass to dnscrypt-proxy
DNSCRYPT_PROXY_OPTIONS=&quot;&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DNSCRYPT_PROXY_RESOLVER_NAME=&lt;/code&gt; değerine karşılık gelen kullanacak olduğunuz dns sağlayıcısıdır. Ben bu ayarlamayı yaparken &lt;code class=&quot;highlighter-rouge&quot;&gt;cisco&lt;/code&gt; tercih ettim.&lt;/p&gt;

&lt;p&gt;bunun dışında özel bir lokal adres kullanacaksanız bunu da &lt;code class=&quot;highlighter-rouge&quot;&gt;DNSCRYPT_PROXY_LOCAL_ADDRESS=127.0.0.31&lt;/code&gt; adresini düzenleyerek yapabilirsiniz.&lt;/p&gt;

&lt;p&gt;Süreci başlatıyorsunuz&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl start dnscrypt-proxy
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Sıra geldi DNS sorgularını ön belleğe aldıracağımız, hayatımızı düzene sokacağımız, güvenliğimizi biraz daha arttıracağımız DNS çözümleyicisini dürteceğiz zaten kurulumunu yapmıştık ayarlamalarınıda şu şekilde yapıyoruz.&lt;/p&gt;

&lt;p&gt;önce gerekli olan &lt;code class=&quot;highlighter-rouge&quot;&gt;root.hints&lt;/code&gt; dosyasını indirip klasörde yerini aldıralım.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget -c ftp://ftp.internic.net/domain/named.cache -O /etc/unbound/root.hints
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Ön tanımlı olarak Unbound DNS uygulaması DNSSEC yapısını aktif ettiği için bunu ek olarak ayarlamamıza gerek yok &lt;code class=&quot;highlighter-rouge&quot;&gt;unbound.conf.d&lt;/code&gt; klasörü içerisine geçişinizi yapın ve aşağıdaki gibi bir dosya oluşturun ben kendi adımı kullandım&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nano mertcan.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Ve içerisini aşağıdaki gibi doldurdum.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server:
  root-hints: &quot;/etc/unbound/root.hints&quot;
  interface: 127.0.0.69
  access-control: 127.0.0.69/8 allow
  private-address: 127.0.0.69/8

  harden-short-bufsize: yes
  harden-large-queries: yes

  cache-max-ttl: 86400
  cache-min-ttl: 3600
  do-ip4: yes
  do-ip6: no
  do-udp: yes
  do-tcp: yes
  hide-version: yes
  hide-identity: yes
  harden-glue: yes
  prefetch: yes
  prefetch-key: yes
  do-not-query-localhost: no
  harden-dnssec-stripped: no
  logfile: &quot;/var/log/unbound.log&quot;
  val-log-level: 2
  verbosity: 1

forward-zone:
  name: &quot;.&quot;
  forward-addr: 127.0.0.31
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Kullanacak olduğum ip adresi &lt;code class=&quot;highlighter-rouge&quot;&gt;127.0.0.69&lt;/code&gt; olduğu için &lt;code class=&quot;highlighter-rouge&quot;&gt;interface: 127.0.0.69&lt;/code&gt; olarak düzenlemeyi yaptım ve &lt;code class=&quot;highlighter-rouge&quot;&gt;access-control&lt;/code&gt; ile &lt;code class=&quot;highlighter-rouge&quot;&gt;private-address&lt;/code&gt; için aynı şekilde düzenledim. Forward kısmında ise Dnscrypt için ayarladığımız ip adresini ekledim ki oraya yönlendirsin.&lt;/p&gt;

&lt;p&gt;Hemen ardından kayıt edip çıktım ve kendi DNS çözücü mü DNSCrypt ile ayarlamış oldum. Bu sayede DNS engellemelerinin önüne geçtim ve Cache yapısı sayesinde DNS sorgularını kısaltmayı başardım.&lt;/p&gt;

&lt;p&gt;İşlemler bittikten sonra sizi şuraya alıyoruz ve DNS’yi nasıl ekleyeceğinizi gösteriyoruz. &lt;a href=&quot;https://mertcangokgoz.com/network-manager-bir-kanser-hucresi/&quot;&gt;Network Manager Bir Kanser Hücresi&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;öptüm bye &amp;lt;3&lt;/p&gt;
</description>
                <link>https://mertcangokgoz.com/dnscrypt-ve-unbound-kullanarak-dns-trafigini-sifreleme/</link>
                <guid>https://mertcangokgoz.com/dnscrypt-ve-unbound-kullanarak-dns-trafigini-sifreleme</guid>
                <pubDate>Tue, 22 Nov 2016 00:00:00 +0300</pubDate>
        </item>

        <item>
                <title>DNSCurve Nedir ?</title>
                <description>&lt;p&gt;&lt;strong&gt;DNSCurve&lt;/strong&gt;, Daniel J. Bernstein tarafından tasarlanan ve Etki Alanı Adı Sistemi (DNS) için önerilen yeni ve güvenli bir protokoldür.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DNSCurve&lt;/strong&gt;, tarafından kullanılan &lt;code class=&quot;highlighter-rouge&quot;&gt;Curve25519&lt;/code&gt; , &lt;code class=&quot;highlighter-rouge&quot;&gt;Salsa20&lt;/code&gt; ve &lt;code class=&quot;highlighter-rouge&quot;&gt;Poly1305&lt;/code&gt; MAC işleviyle eşleşen anahtarları, çözümleyiciler ve yetkili sunucular arasındaki &lt;strong&gt;DNS&lt;/strong&gt; paketlerini şifrelemek, doğrulamak ve bağlantı kurmak için eliptik eğri şifrelemesi kullanılır. Uzak yetkili sunucular için ortak anahtarlar NS kayıtlarına yerleştirilir, bu nedenle recursive çözümleyiciler sunucunun DNSCurve’u destekleyip desteklemediğini bilir. Olay &lt;code class=&quot;highlighter-rouge&quot;&gt;uz5&lt;/code&gt; ile başlar ve sunucunun 255 bitlik genel anahtarının 51 baytlık bir &lt;code class=&quot;highlighter-rouge&quot;&gt;Base32&lt;/code&gt; kodlamasını izler.&lt;/p&gt;

&lt;p&gt;Örneğin, &lt;strong&gt;BIND&lt;/strong&gt; biçiminde;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mertcangokgoz.com. IN NS uz5xo1ymn4mw5oodb4mxixn3e2ntnqzjnndxl3ejdjbxl.mertcangokgoz.com.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Çözümleyici daha sonra sunucuya &lt;strong&gt;DNSCurve&lt;/strong&gt; genel anahtarını, 96 bit &lt;strong&gt;nonce&lt;/strong&gt;(Kriptografi’de bir nonce, yalnızca bir kez kullanılabilen keyfi rastgele bir sayıdır.) ve sorguyu cryptographic box içeren bir paket halinde gönderir. Cryptographic box, çözümleyici özel anahtarı, sunucunun genel anahtarı ve &lt;strong&gt;nonce&lt;/strong&gt; kullanılarak oluşturulur.&lt;/p&gt;

&lt;p&gt;Sunucudan gelen yanıt, farklı bir 96-bit &lt;strong&gt;nonce&lt;/strong&gt; ve sorunun cevabını içeren kendi Kriptografik bilgiyi içerir.&lt;/p&gt;

&lt;p&gt;DNSCurve’de kullanılan şifreleme araçları, TCP’ye benzer, ancak verileri şifrelemek ve doğrulamak için eliptik eğri şifreleme kullanan UDP tabanlı bir iletişim kuralı olan &lt;strong&gt;CurveCP’de&lt;/strong&gt; kullanılanla aynıdır. Bir benzetme yapalım, &lt;strong&gt;DNSSEC&lt;/strong&gt;, PGP ile bir web sayfası imzalamak isterken &lt;strong&gt;CurveCP&lt;/strong&gt; ve DNSCurve, SSL’yi kullanarak kanalı şifrelemek ve doğrulamak için ve Tıpkı PGP imzalı web sayfaları şifreli bir kanal üzerinden SSL kullanarak gönderilebileceği gibi, &lt;strong&gt;DNSSEC&lt;/strong&gt; verileri de DNSCurve kullanılarak korunabilir.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DNSCurve&lt;/strong&gt;, önceki DNS hizmetlerine göre avantajları;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Gizlilik&lt;/strong&gt; - normal DNS, istekleri ve yanıtları şifrelemez ve herhangi bir saldırgana bu bilgileri yayınlayabilir.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Bütünlük&lt;/strong&gt; - normal DNS, bazı korumalara sahiptir ancak sabırlı bir şekilde sniffing ile saldırganlar DNS kayıtlarını yeniden oluşturabilir; Bu, &lt;strong&gt;DNSCurve&lt;/strong&gt;‘nin Kriptografik kimlik doğrulaması ile engellenir.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Kullanılabilirlik&lt;/strong&gt; - normal DNS, saniyede birkaç sahte paket gönderen sniffing saldırganlarından ve hizmet reddine (DoS) lara karşı koruma sağlamaz. &lt;strong&gt;DNSCurve&lt;/strong&gt; ise sahte DNS paketlerini tanır ve atar; SMTP, HTTP, HTTPS gibi bazı protokoller DoS’a karşı savunmasızdırlar.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;gvenlik&quot;&gt;Güvenlik&lt;/h3&gt;

&lt;p&gt;DNSCurve, &lt;strong&gt;NIST&lt;/strong&gt;(Ulusal Standartlar ve Teknoloji Enstitüsü)’nin kabaca 3072-bit RSA’ya eşdeğer olduğunu tahmin ettiği 256-bit eliptik eğri şifrelemeyi kullanır. &lt;code class=&quot;highlighter-rouge&quot;&gt;ECRYPT&lt;/code&gt; benzer bir eşdeğerliği bildirir. Sorgu başına sorguya açık anahtarlı şifreleme (SSH ve SSL gibi) ve tekrar çalma saldırılarına karşı koruma sağlamak için 96 bitlik şifreler kullanır.&lt;/p&gt;

&lt;p&gt;Google güvenlik sorumlusu Adam Langley;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Çok yüksek bir ihtimalle kimse büyük bir kuantum bilgisayar olmadan curve25519’un tek bir örneğini çözemez&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;diyor.&lt;/p&gt;

&lt;h3 id=&quot;hz&quot;&gt;Hız&lt;/h3&gt;

&lt;p&gt;Adam Langley kişisel web sitesinde, test edilen eliptik eğriler arasında en hızlı olması için DNSCurve tarafından kullanılan &lt;strong&gt;curve25519&lt;/strong&gt;‘u gösteren hız testleri yayınladı. &lt;sup&gt;&lt;a href=&quot;https://www.imperialviolet.org/2010/12/21/eccspeed.html&quot;&gt;1&lt;/a&gt;&lt;sup&gt;&lt;/sup&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;NSA’ya göre, eliptik eğri kriptografisi, anahtar boyutları arttıkça &lt;code class=&quot;highlighter-rouge&quot;&gt;RSA&lt;/code&gt; ve &lt;code class=&quot;highlighter-rouge&quot;&gt;Diffie-Hellman&lt;/code&gt; ‘a göre geometrik bir oranda çok daha üstün performans sunar.&lt;/p&gt;

&lt;p&gt;Kaynak: https://en.wikipedia.org/wiki/DNSCurve&lt;/p&gt;
</description>
                <link>https://mertcangokgoz.com/dnscurve-nedir/</link>
                <guid>https://mertcangokgoz.com/dnscurve-nedir</guid>
                <pubDate>Mon, 21 Nov 2016 00:00:00 +0300</pubDate>
        </item>

        <item>
                <title>Network Manager Bir Kanser Hücresi</title>
                <description>&lt;p&gt;Evet uzun bir aradan sonra tekrar beraberiz ilginç bir durum ile karşınızdayım vizelerin bitmesini fırsat bilip Onur ile birlikte unbound + DNSCrypt kurmaya karar verdim onun konfigürasyon dosyaları oldukça işime yaradı ancak bir noktada bizi çileden çıkarttı&lt;/p&gt;

&lt;p&gt;network manager = &lt;strong&gt;kanser&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Evet bu konuda Onur’un dediği gibi bunu fark etmem haliyle geç oldu kolaylık sağlıyor. Dursun dedik destek yerine köstek oldu bu kadarda olmaz bir DNS ayarlaması zulüm oldu&lt;/p&gt;

&lt;p&gt;Şimdi olayı bana yaşatan lokal dns server kurulumundan sonra DNS kayıtlarını güncellerken network-manager kardeşin hala modemdeki dnsyi almasıydı&lt;/p&gt;

&lt;p&gt;Biraz uğraştırdı bizi bir kaç yerden ayarlama yapmamız ve bu lanet olası şeyi kaldırmamız gerekti öncelikle debian kullanıyorum bunu belirteyim sizlere&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apt purge network-manager network-manager-gnome
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;İlk olarak güzelce bir sildim şu boku reboot falan atarsanız internetiniz olmayacak bunu biliyorsunuz ama &lt;strong&gt;interfaces&lt;/strong&gt; kardeşi kullanıcaz ne gerek var network managere ya gereksiz&lt;/p&gt;

&lt;p&gt;Ben dizüstü bilgisayar kullanıyorum her ne kadar wifi ye pek bağlanmıyor olsam da bu yüzden direk olarak kablolu bağlantıya göre interneti ayarlıyorum. &lt;code class=&quot;highlighter-rouge&quot;&gt;uydunet network&lt;/code&gt; yazan benim kablolu bağlantım güzel bir şekilde otomatiğe aldık ve dhcp den çeksin istedik&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@0x2e88ce4:~# cat /etc/network/interfaces
# This file describes the network interfaces available on your system
# and how to activate them. For more information, see interfaces(5).

source /etc/network/interfaces.d/*

# The loopback network interface
auto lo
iface lo inet loopback

# Uydunet Network
allow-hotplug enp4s0
iface enp4s0 inet dhcp
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Şimdi bu yaptığımıza göre otomatik olarak ipleri alıp dnsleri girecek bu girdikleri modemin DNS bilgileri olacak bunu engellemek için ise&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nano /etc/dhcp/dhclient.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;içerisinde DNS değişkenine almasını istediğimiz değeri şu şekilde tanımlatıyoruz. Ben local DNS server ip adresini girdim. Siz böyle bir şey yapmayacaksanız kullanmak istediğinizi yazın&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;prepend domain-name-servers 127.0.0.69;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Kayıt edip çıkıyoruz. Sisteminiz güzelce internete çıkmış olacak network manager denen uygulamadan kurtulmuş olacaksınız. Peki wifi bağlanmak istediniz ne olacak tabikide zor değil&lt;/p&gt;

&lt;p&gt;İlk önce aşağıdaki komut aracılığı ile ney olduğunu bi öğrenin bende &lt;code class=&quot;highlighter-rouge&quot;&gt;wlp3s0&lt;/code&gt; olduğu için ayarlamalarımızı ona göre yapıyorum.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ip a
iwconfig
ip link set wlp3s0 up
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;tabi bundan önce ben rfkill ile kapattığım için onu açtım bunu FN tuş kombinasyonları ile yapabildiğim için ek bir şey kullanmaya gerek duymadım.&lt;/p&gt;

&lt;p&gt;Wifi donanımımız açıldıktan sonra ise tarama işlemi yapalım çalışıyormu diye kontrol edelim.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;iwlist scan
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Tarama sonucunda bana en yakın olanı şu şekilde ortaya çıktı&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;          Cell 01 - Address: 18:28:61:E9:81:2C
                    Channel:3
                    Frequency:2.422 GHz (Channel 3)
                    Quality=42/70  Signal level=-68 dBm
                    Encryption key:on
                    ESSID:&quot;NetMASTER Uydunet-AD66&quot;
                    Bit Rates:1 Mb/s; 2 Mb/s; 5.5 Mb/s; 11 Mb/s; 18 Mb/s
                              24 Mb/s; 36 Mb/s; 54 Mb/s
                    Bit Rates:6 Mb/s; 9 Mb/s; 12 Mb/s; 48 Mb/s
                    Mode:Master
                    Extra:tsf=0000006a5171b0ce
                    Extra: Last beacon: 2680ms ago
                    IE: Unknown: 001A54544E45545F416972546965735F416972353635305F33423334
                    IE: Unknown: 010882848B962430486C
                    IE: Unknown: 030103
                    IE: Unknown: 2A0100
                    IE: Unknown: 2F0100
                    IE: IEEE 802.11i/WPA2 Version 1
                        Group Cipher : TKIP
                        Pairwise Ciphers (2) : CCMP TKIP
                        Authentication Suites (1) : PSK
                    IE: Unknown: 32040C121860
                    IE: Unknown: 2D1A7C181BFFFF000000000000000000000000000000000000000000
                    IE: Unknown: 3D1603080400000000000000000000000000000000000000
                    IE: Unknown: 4A0E14000A002C01C800140005001900
                    IE: Unknown: 7F0101
                    IE: Unknown: DD0B001CA8500101E9812C2B03
                    IE: Unknown: DDBF0050F204104A0001101044000102103B00010310470010B3FC5511C0F23C7342D547F8479E486C102100194169725469657320576972656C657373204E6574776F726B731023000941697235363530545410240007312E302E332E311042000F4154313633313430363031323830381054000800060050F204000110110009416972353635305454100800022008103C0001011049000600372A0001201049001E007FC51000180B5947706C78D38CB60DA7971E68D5D93030303030363339
                    IE: Unknown: DD090010180202F02C0000
                    IE: WPA Version 1
                        Group Cipher : TKIP
                        Pairwise Ciphers (2) : CCMP TKIP
                        Authentication Suites (1) : PSK
                    IE: Unknown: DD180050F2020101800003A4000027A4000042435E0062322F00
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Cihaz hakkında bilgileri görebilirsiniz. Şimdi bağlanmak istediğimiz bu olsun şu şekilde bir ayarlama yapmamız gerekiyor.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nano /etc/network/interfaces
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;İçerisine yukardaki kablolu bağlantıda yaptığımız gibi ayarlamayı yapıyoruz.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Wifi NetMASTER Uydunet-AD66
auto wlp3s0
iface wlp3s0 inet dhcp
	wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;peki bahsi geçen konfigürasyon dosyasında ne var&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@0x2e88ce4:/etc/wpa_supplicant# cat wpa_supplicant.conf
# Netmaster Uydunet-AD66
network={
	ssid=&quot;NetMASTER Uydunet-AD66&quot;
	#psk=&quot;a21a33075f5e6aa3&quot;
	psk=06218cc6a5eae69640972f074827caceaa1502cc49bf42327fbe2c8ffb40fd62
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Çalıştığını &lt;code class=&quot;highlighter-rouge&quot;&gt;dmesg&lt;/code&gt; sorgusunun çıktısına bakarak anlayabiliriz &lt;code class=&quot;highlighter-rouge&quot;&gt;authenticated&lt;/code&gt; olmuş ve bağlantı sağlanmış. Ayrıca nete girip girmediği durumu ile de anlayabilirsiniz.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[  901.276010] wlp3s0: authenticate with 00:1c:7b:cc:b3:54
[  901.279214] wlp3s0: send auth to 00:1c:7b:cc:b3:54 (try 1/3)
[  901.281124] wlp3s0: authenticated
[  901.284657] wlp3s0: associate with 00:1c:7b:cc:b3:54 (try 1/3)
[  901.287733] wlp3s0: RX AssocResp from 00:1c:7b:cc:b3:54 (capab=0x1411 status=0 aid=3)
[  901.289250] wlp3s0: associated
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Kayıt edip çıkışınızı yapıyorsunuz. İsterseniz networkü isterseniz de sistemi yeniden başlatarak ayarlarınızın geçerli olmasını sağlayabilirsiniz.&lt;/p&gt;

&lt;p&gt;Birden çok wifi tanımlayabilirsiniz. Hangisine bağlanacak yada bağlanacağım diyorsanız da bunu kendisi otomatik olarak seçiyor bu seçimi yaparken de çekim gücü en iyi olana göre yapıyor.&lt;/p&gt;

&lt;p&gt;Bu işlem ile lanet olası network-manager uygulamasından hem kurtulmuş oluyorsunuz hemde rahat rahat işiniz gücünüze bakabiliyorsunuz. Sorun yaratan sıkıntı çıkartan bir uygulama artık yok&lt;/p&gt;

&lt;p&gt;Aldığım saçma salak hataların çözümü için &lt;a href=&quot;https://onur.im/&quot;&gt;Onur Aslan&lt;/a&gt; Teşekkür ederim.&lt;/p&gt;

&lt;p&gt;öptüm bye &amp;lt;3&lt;/p&gt;
</description>
                <link>https://mertcangokgoz.com/network-manager-bir-kanser-hucresi/</link>
                <guid>https://mertcangokgoz.com/network-manager-bir-kanser-hucresi</guid>
                <pubDate>Sun, 20 Nov 2016 00:00:00 +0300</pubDate>
        </item>

        <item>
                <title>Jekyll SoundCloud Eklentisi</title>
                <description>&lt;p&gt;Jekyll de kullanabileceğiniz bir başka eklenti soundcloud eklentisi oldukça güzel verdiğiniz id ve özelliklere göre embed player olarak sitenizde gösterim yapabilirsiniz.&lt;/p&gt;

&lt;p&gt;Spotify eklentisinde olduğu gibi bununla da güzel siteler oluşturabilme imkanınız bulunuyor.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;#  SoundCloud embed tag for Jekyll/Liquid
#
#  Usage: 
#  
#    {% soundcloud_sound 12345 %}
#    {% soundcloud_sound 12345 widgetname %}
#    {% soundcloud_sound 12345 widgetname ffffff %}
#    {% soundcloud_sound 12345 widgetname ffffff small %}
#
#    ... where 12345 is the SoundCloud sound ID, widgetname is the sound&amp;#39;s visual 
#    representation, ffffff is the color, and size is, well, the size (SoundCloud gives you 
#    three options for the &amp;quot;artwork&amp;quot; widget).
#
#  Available SoundCloud widgets:
#   
#    html5 (default)
#    flash *
#    mini *
#    artwork *
#    
#    * Requires a paid SoundCloud tier
#
#  Author: Chris Nunciato (@cnunciato)
#  Source: http://github.com/cnunciato/jekyll-soundcloud

require &amp;#39;shellwords&amp;#39;

module Jekyll
  class SoundCloudSoundTag &amp;lt; Liquid::Tag

    def initialize(tag_name, markup, tokens)
      super
      params = Shellwords.shellwords markup
      @sound = { :id =&amp;gt; params[0], :widget =&amp;gt; params[1] || &amp;quot;html5&amp;quot;, :color =&amp;gt; params[2] || &amp;quot;ff7700&amp;quot;, :size =&amp;gt; params[3] || &amp;quot;medium&amp;quot; }
    end

    def render(context)
      case @sound[:widget]

      when &amp;quot;html5&amp;quot;
        &amp;quot;&amp;lt;iframe width=\&amp;quot;100%\&amp;quot; height=\&amp;quot;166\&amp;quot; scrolling=\&amp;quot;no\&amp;quot; frameborder=\&amp;quot;no\&amp;quot; src=\&amp;quot;http://w.soundcloud.com/player/?url=http%3A%2F%2Fapi.soundcloud.com%2Ftracks%2F#{@sound[:id]}&amp;amp;show_artwork=true\&amp;quot;&amp;gt;&amp;lt;/iframe&amp;gt;&amp;quot;
      when &amp;quot;flash&amp;quot;
        &amp;quot;&amp;lt;object height=\&amp;quot;81\&amp;quot; width=\&amp;quot;100%\&amp;quot;&amp;gt;&amp;lt;param name=\&amp;quot;movie\&amp;quot; value=\&amp;quot;https://player.soundcloud.com/player.swf?url=http%3A%2F%2Fapi.soundcloud.com%2Ftracks%2F#{@sound[:id]}&amp;amp;amp;show_comments=false&amp;amp;amp;auto_play=false&amp;amp;amp;color=#{@sound[:color]}\&amp;quot;&amp;gt;&amp;lt;/param&amp;gt;&amp;lt;param name=\&amp;quot;allowscriptaccess\&amp;quot; value=\&amp;quot;always\&amp;quot;&amp;gt;&amp;lt;/param&amp;gt;&amp;lt;embed allowscriptaccess=\&amp;quot;always\&amp;quot; height=\&amp;quot;81\&amp;quot; src=\&amp;quot;https://player.soundcloud.com/player.swf?url=http%3A%2F%2Fapi.soundcloud.com%2Ftracks%2F#{@sound[:id]}&amp;amp;amp;show_comments=false&amp;amp;amp;auto_play=false&amp;amp;amp;color=#{@sound[:color]}\&amp;quot; type=\&amp;quot;application/x-shockwave-flash\&amp;quot; width=\&amp;quot;100%\&amp;quot;&amp;gt;&amp;lt;/embed&amp;gt;&amp;lt;/object&amp;gt;&amp;quot;
      when &amp;quot;mini&amp;quot;
        &amp;quot;&amp;lt;object height=\&amp;quot;18\&amp;quot; width=\&amp;quot;100%\&amp;quot;&amp;gt;&amp;lt;param name=\&amp;quot;movie\&amp;quot; value=\&amp;quot;https://player.soundcloud.com/player.swf?url=http%3A%2F%2Fapi.soundcloud.com%2Ftracks%2F#{@sound[:id]}&amp;amp;amp;auto_play=false&amp;amp;amp;player_type=tiny&amp;amp;amp;font=Arial&amp;amp;amp;color=#{@sound[:color]}\&amp;quot;&amp;gt;&amp;lt;/param&amp;gt; &amp;lt;param name=\&amp;quot;allowscriptaccess\&amp;quot; value=\&amp;quot;always\&amp;quot;&amp;gt;&amp;lt;/param&amp;gt; &amp;lt;param name=\&amp;quot;wmode\&amp;quot; value=\&amp;quot;transparent\&amp;quot;&amp;gt;&amp;lt;/param&amp;gt;&amp;lt;embed wmode=\&amp;quot;transparent\&amp;quot; allowscriptaccess=\&amp;quot;always\&amp;quot; height=\&amp;quot;18\&amp;quot; src=\&amp;quot;https://player.soundcloud.com/player.swf?url=http%3A%2F%2Fapi.soundcloud.com%2Ftracks%2F#{@sound[:id]}&amp;amp;amp;auto_play=false&amp;amp;amp;player_type=tiny&amp;amp;amp;font=Arial&amp;amp;amp;color=#{@sound[:color]}\&amp;quot; type=\&amp;quot;application/x-shockwave-flash\&amp;quot; width=\&amp;quot;100%\&amp;quot;&amp;gt;&amp;lt;/embed&amp;gt;&amp;lt;/object&amp;gt;&amp;quot;
      when &amp;quot;artwork&amp;quot;
        &amp;quot;&amp;lt;object height=\&amp;quot;#{dimension}\&amp;quot; width=\&amp;quot;#{dimension}\&amp;quot;&amp;gt;&amp;lt;param name=\&amp;quot;movie\&amp;quot; value=\&amp;quot;https://player.soundcloud.com/player.swf?url=http%3A%2F%2Fapi.soundcloud.com%2Ftracks%2F#{@sound[:id]}&amp;amp;amp;auto_play=false&amp;amp;amp;player_type=artwork&amp;amp;amp;color=#{@sound[:color]}\&amp;quot;&amp;gt;&amp;lt;/param&amp;gt;&amp;lt;param name=\&amp;quot;allowscriptaccess\&amp;quot; value=\&amp;quot;always\&amp;quot;&amp;gt;&amp;lt;/param&amp;gt;&amp;lt;embed allowscriptaccess=\&amp;quot;always\&amp;quot; height=\&amp;quot;220\&amp;quot; src=\&amp;quot;https://player.soundcloud.com/player.swf?url=http%3A%2F%2Fapi.soundcloud.com%2Ftracks%2F#{@sound[:id]}&amp;amp;amp;auto_play=false&amp;amp;amp;player_type=artwork&amp;amp;amp;color=#{@sound[:color]}\&amp;quot; type=\&amp;quot;application/x-shockwave-flash\&amp;quot; width=\&amp;quot;220\&amp;quot;&amp;gt;&amp;lt;/embed&amp;gt;&amp;lt;/object&amp;gt;&amp;quot;
      else
        &amp;quot;&amp;quot;
      end
    end

    private

      def dimension(size)
        case @sound[:size]

        when &amp;#39;small&amp;#39;
          220
        when &amp;#39;medium&amp;#39;
          300
        when &amp;#39;large&amp;#39;
          425
        else
          0
        end
      end

  end

end

Liquid::Template.register_tag(&amp;#39;soundcloud_sound&amp;#39;, Jekyll::SoundCloudSoundTag)&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/MertcanGokgoz/28a3363645af48b91cc757afcbe4dd03.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;öptüm bye &amp;lt;3&lt;/p&gt;
</description>
                <link>https://mertcangokgoz.com/jekyll-soundcloud-eklentisi/</link>
                <guid>https://mertcangokgoz.com/jekyll-soundcloud-eklentisi</guid>
                <pubDate>Sat, 05 Nov 2016 00:00:00 +0300</pubDate>
        </item>

        <item>
                <title>Ruby Eğitim Seti</title>
                <description>&lt;p&gt;Ruby öğrenmek isteyen arkadaşlar için özenle hazırlanmış ve toplamda 76 videodan oluşan bu eğitim setini kullanarak sizlerde ruby ile web siteleri yapabilir, masaüstü uygulamaları geliştirebilirsiniz.&lt;/p&gt;

&lt;iframe width=&quot;640&quot; height=&quot;360&quot; src=&quot;https://www.youtube-nocookie.com/embed/udtRFuay-sA?list=PLPAgSS6rtWabY7fksUEw6ms07oSVNoL6t&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Videolar &lt;strong&gt;İngilizce&lt;/strong&gt; olup anlayabileceğiniz bir düzeydedir.&lt;/p&gt;
</description>
                <link>https://mertcangokgoz.com/ruby-egitim-seti/</link>
                <guid>https://mertcangokgoz.com/ruby-egitim-seti</guid>
                <pubDate>Fri, 04 Nov 2016 00:00:00 +0300</pubDate>
        </item>

        <item>
                <title>Cisco CCNA Network Eğitim Seti</title>
                <description>&lt;p&gt;Cisco CCNA network eğitim seti her biri 2 saat ile 30 dk arasında olup toplamda 34 videodan oluşmaktadır. &lt;strong&gt;Cemal TANER&lt;/strong&gt; hocamızın anlatımıyla bu eğitim setini kullanarak &lt;strong&gt;CISCO CCNA Routing&amp;amp;Switching 200-125&lt;/strong&gt; sınavlarını geçebilirsiniz.&lt;/p&gt;

&lt;p&gt;34 Videoluk eğitim Setine aşağıdaki playlist aracılığı ile ulaşabilirsiniz.&lt;/p&gt;

&lt;iframe width=&quot;640&quot; height=&quot;360&quot; src=&quot;https://www.youtube-nocookie.com/embed/videoseries?list=PLQMq5dvivt0VeodeBs_cOhPQC_ZHoG2Ap&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

</description>
                <link>https://mertcangokgoz.com/cisco-ccna-network-egitim-seti/</link>
                <guid>https://mertcangokgoz.com/cisco-ccna-network-egitim-seti</guid>
                <pubDate>Wed, 02 Nov 2016 00:00:00 +0300</pubDate>
        </item>

        <item>
                <title>Jekyll JSFiddle Eklentisi</title>
                <description>&lt;p&gt;Jekyll de kullanabileceğiniz ve kodlarınızı github gist dışında gösterebileceğiniz bir platform olan JSfiddle’ı bu eklenti ile kolaylıkla kullanabilirsiniz.&lt;/p&gt;

&lt;p&gt;Nasıl kullanılacağı ve neler yapılabileceği aşağıda bulunmaktadır. İstediğiniz şekillerde kullanabilmekte özgürsünüz&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;# Syntax: {% jsfiddle shorttag [tabs] [skin] [height] [width] %}
#
# Examples:
#
# Input: {% jsfiddle ccWP7 %}
# Output: &amp;lt;iframe style=&amp;quot;width: 100%; height: 300px&amp;quot; src=&amp;quot;http://jsfiddle.net/ccWP7/embedded/js,resources,html,css,result/light/&amp;quot;&amp;gt;&amp;lt;/iframe&amp;gt;
#
# Input: {% jsfiddle ccWP7 js,html,result %}
# Output: &amp;lt;iframe style=&amp;quot;width: 100%; height: 300px&amp;quot; src=&amp;quot;http://jsfiddle.net/ccWP7/embedded/js,html,result/light/&amp;quot;&amp;gt;&amp;lt;/iframe&amp;gt;
#

module Jekyll
  class JsFiddle &amp;lt; Liquid::Tag
    def initialize(tag_name, markup, tokens)
      if /(?&amp;lt;fiddle&amp;gt;\w+\/?\d?)(?:\s+(?&amp;lt;sequence&amp;gt;[\w,]+))?(?:\s+(?&amp;lt;skin&amp;gt;\w+))?(?:\s+(?&amp;lt;height&amp;gt;\w+))?(?:\s+(?&amp;lt;width&amp;gt;\w+))?/ =~ markup
        @fiddle   = fiddle
        @sequence = (sequence unless sequence == &amp;#39;default&amp;#39;) || &amp;#39;js,resources,html,css,result&amp;#39;
        @skin     = (skin unless skin == &amp;#39;default&amp;#39;) || &amp;#39;light&amp;#39;
        @width    = width || &amp;#39;100%&amp;#39;
        @height   = height || &amp;#39;300px&amp;#39;
      end
    end

    def render(context)
      if @fiddle
        &amp;quot;&amp;lt;iframe style=\&amp;quot;width: #{@width}; height: #{@height}\&amp;quot; frameborder=\&amp;quot;0\&amp;quot; seamless=\&amp;quot;seamless\&amp;quot; src=\&amp;quot;http://jsfiddle.net/#{@fiddle}/embedded/#{@sequence}/#{@skin}/\&amp;quot;&amp;gt;&amp;lt;/iframe&amp;gt;&amp;quot;
      else
        &amp;quot;Error processing input, expected syntax: {% jsfiddle shorttag [tabs] [skin] [height] [width] %}&amp;quot;
      end
    end
  end
end

Liquid::Template.register_tag(&amp;#39;jsfiddle&amp;#39;, Jekyll::JsFiddle)
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/MertcanGokgoz/b232c0e0e31530dee1c4d7200e4711de.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;öptüm bye &amp;lt;3&lt;/p&gt;
</description>
                <link>https://mertcangokgoz.com/jekyll-jsfiddle-eklentisi/</link>
                <guid>https://mertcangokgoz.com/jekyll-jsfiddle-eklentisi</guid>
                <pubDate>Tue, 01 Nov 2016 00:00:00 +0300</pubDate>
        </item>

        <item>
                <title>IPv6 Eğitim Seti</title>
                <description>&lt;p&gt;&lt;strong&gt;Cemal TANER&lt;/strong&gt; hocamızın hazırlamış olduğu &lt;strong&gt;IPv6 Eğitim Seti&lt;/strong&gt; 4 adet video serisinden oluşmaktadır. IPv6 hakkında öğrenmeniz gereken temel bir çok bilgiyi içermektedir.&lt;/p&gt;

&lt;p&gt;IPv6 Eğitim Serisi: IPv4 Sınırlamaları,IPv6 Tanıtımı,IPv6 Başlığı&lt;/p&gt;

&lt;iframe width=&quot;640&quot; height=&quot;360&quot; src=&quot;https://www.youtube-nocookie.com/embed/tUCIOhQG6L0?list=PLQMq5dvivt0UoMPqVJRgYlesiMZiurSWG&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;IPv6 Eğitim Serisi: IPv6 Gereksinimi,IPv4 ve IPv6’nın Birlikte Kullanılması,IPv6 Adres Gösterimi&lt;/p&gt;

&lt;iframe width=&quot;640&quot; height=&quot;360&quot; src=&quot;https://www.youtube-nocookie.com/embed/FfIQ02JJdpY?list=PLQMq5dvivt0UoMPqVJRgYlesiMZiurSWG&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;IPv6 Eğitim Serisi: IPv6 Adresleri Kısaltma&lt;/p&gt;

&lt;iframe width=&quot;640&quot; height=&quot;360&quot; src=&quot;https://www.youtube-nocookie.com/embed/zMPBL6caNmc?list=PLQMq5dvivt0UoMPqVJRgYlesiMZiurSWG&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;IPv6 Eğitim Serisi: IPv6 Adresler Türleri&lt;/p&gt;

&lt;iframe width=&quot;640&quot; height=&quot;360&quot; src=&quot;https://www.youtube-nocookie.com/embed/cMLkNC-ONDc?list=PLQMq5dvivt0UoMPqVJRgYlesiMZiurSWG&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Eğitim Seti için kendisine ayrıca teşekkür ediyorum.&lt;/p&gt;
</description>
                <link>https://mertcangokgoz.com/ipv6-egitim-seti/</link>
                <guid>https://mertcangokgoz.com/ipv6-egitim-seti</guid>
                <pubDate>Mon, 31 Oct 2016 00:00:00 +0300</pubDate>
        </item>

        <item>
                <title>Network Manager IPv6 Sorunu ve Çözümü</title>
                <description>&lt;p&gt;Geçtiğimiz günlerde her ne hikmet ise ipv6 yı bulamıyorum havarrrr gençler diye feryat eden ve kernel mesajlarında aşağıdaki gibi bir çıktı veren bu ilginç durumun çözümü için uğraşacağız.&lt;/p&gt;

&lt;p&gt;Şimdi &lt;code class=&quot;highlighter-rouge&quot;&gt;dmesg&lt;/code&gt; de çıkan ve oldukça fazla olan çıktıya bir göz atalım&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;IPv6: ADDRCONF(NETDEV_UP): wlp3s0: link is not ready
IPv6: ADDRCONF(NETDEV_UP): wlp3s0: link is not ready
IPv6: ADDRCONF(NETDEV_UP): wlp3s0: link is not ready
IPv6: ADDRCONF(NETDEV_UP): wlp3s0: link is not ready
IPv6: ADDRCONF(NETDEV_UP): wlp3s0: link is not ready
IPv6: ADDRCONF(NETDEV_UP): wlp3s0: link is not ready
IPv6: ADDRCONF(NETDEV_UP): wlp3s0: link is not ready
IPv6: ADDRCONF(NETDEV_UP): wlp3s0: link is not ready
IPv6: ADDRCONF(NETDEV_UP): wlp3s0: link is not ready
IPv6: ADDRCONF(NETDEV_UP): wlp3s0: link is not ready
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Bunlar sadece bir kaçtı dmesg kayıtlarını oldukça şişiriyor ve üstüne üstlük birde &lt;code class=&quot;highlighter-rouge&quot;&gt;networkmanager&lt;/code&gt; kardeşi yeniden başlatmaya zorluyorlar yaklaşık 1 saat ile 10 dk da bir internetin kopmasına sebebiyet veriyor&lt;/p&gt;

&lt;p&gt;Ben ilk olarak çözümü kernel ipv6 yı kapatarak bulduysam da ki şu şekildedir.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;şeklinde olan satıra şunu eklemiştik&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ipv6.disable=1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;ve son hali şu şekildeydi&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GRUB_CMDLINE_LINUX_DEFAULT=&quot;ipv6.disable=1  quiet&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Ancak bu tam olarak bir çözüm olamazdı ipv6 kullanmamızda gerekebilirdi gerçi kullanabildiğimiz zaman bu böceğin oluşacağını sanmıyorum ama herneyse&lt;/p&gt;

&lt;p&gt;Şimdi gelelim daha güzel bir çözüm yöntemine şimdi sıkıntıyı yaratan bu arkadaş sistem başlangıcında başlayıp kapatılıncaya kadar devam ediyor. &lt;code class=&quot;highlighter-rouge&quot;&gt;boot&lt;/code&gt; olurken bir servis ile ortaya çıkıyordur illaki bizde buna bir göz atıcaz.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemd-analyze plot &amp;gt; /tmp/plot.svg
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.svg&lt;/code&gt; şeklinde grafiğimizi isteyelim. Bunun içerisinde hangi süreç kaç saniye uğraşmış debelenmiş ve aktif olmuş hepsini görebileceğiz&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/plot.jpg&quot; alt=&quot;plotgrafik&quot; /&gt;&lt;/p&gt;

&lt;p&gt;grafiğe baktığımızda en çok sıkıntı çıkartanın aşağıdakiler olduğunu görüyoruz.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;networking.service (1.724s)&lt;/li&gt;
  &lt;li&gt;systemd-timesyncd.service (1.525s)&lt;/li&gt;
  &lt;li&gt;NetworkManager-wait-online.service (9.324s)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Şimdi bu sıkıntıyı yapan &lt;code class=&quot;highlighter-rouge&quot;&gt;systemd-timesyncd.service&lt;/code&gt; servisi olamazdı geriye kalan iki tanesinden bir tanesiydi&lt;/p&gt;

&lt;p&gt;hemen duruma bakmak için şöyle bir yol izledim.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl status NetworkManager-wait-online.service
systemctl disable NetworkManager-wait-online.service
systemctl stop NetworkManager-wait-online.service
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;şimdi durumuna baktık pek iç açıcı gözükmedi gözümüze bizde hemen boş durmadık servisi başlangıçtan kaldırıp durdurduk.&lt;/p&gt;

&lt;p&gt;Bu sorun aslında şundan kaynaklanıyordu yukarda bahsi geçen &lt;code class=&quot;highlighter-rouge&quot;&gt;NetworkManager-wait-online.service&lt;/code&gt; devamlı süreçlerin online olmasını bekliyor ve buna göre davranıyor elimizdede IPv6 olmadığı için saçma salak bir şekilde &lt;code class=&quot;highlighter-rouge&quot;&gt;IPv6: ADDRCONF(NETDEV_UP): wlp3s0: link is not ready&lt;/code&gt; uyarısını çıktı olarak veriyor ve hazır değil diyordu&lt;/p&gt;

&lt;p&gt;Network manager de bunu fırsat bilip restart atıyor ve belki gelir umudu ile bir takım davranışlar sergiliyordu.&lt;/p&gt;

&lt;p&gt;dipnot: bağlantı kalitenizi olumsuz yönde etkileyebilir. Sonra bana sövmeyin deneme yanılma ile kontrol etmenizi öneririm.&lt;/p&gt;

&lt;p&gt;öptüm bye &amp;lt;3&lt;/p&gt;
</description>
                <link>https://mertcangokgoz.com/network-manager-ipv6-sorunu-ve-cozumu/</link>
                <guid>https://mertcangokgoz.com/network-manager-ipv6-sorunu-ve-cozumu</guid>
                <pubDate>Sat, 29 Oct 2016 00:00:00 +0300</pubDate>
        </item>

        <item>
                <title>Ubuntu Sunucular için LivePatch Özelliği</title>
                <description>&lt;p&gt;&lt;strong&gt;Linux 4.0&lt;/strong&gt; serisi kernelli ile birlikte ubuntu hayatına giren bir özellikten bahsetmek istiyorum. Bu özellik sayesinde kritik güncellemeleri sorunsuz bir şekilde sistemi hiçbir şekilde yeniden başlatmadan yapabiliyoruz. Bu özellik &lt;strong&gt;REDHAT&lt;/strong&gt; tarafında ücretli olarak sunuluyor enterprise tarafında görmüşsünüzdür diye düşünüyorum. Ubuntuda bir değişiklik yapıp bu özelliğin bir farklı sürümünü ücretsiz olarak sunmaya başlamış bunu ben göreli yaklaşık 3 gün oluyor yani bu makele yayınlandığı günden 3 gün geriye geliyorsunuz.&lt;/p&gt;

&lt;p&gt;Bu özelliği kullanabilmeniz için 16 serisi bir ubuntu kullanmanız gerekiyor kernel de en son güncel olan olması lazım ayrıca bu özellik 32 bitlerde çalışmıyor.&lt;/p&gt;

&lt;p&gt;Peki bu özelliği nasıl aktif hale getiriyoruz. İlk önce &lt;a href=&quot;https://auth.livepatch.canonical.com/&quot;&gt;bu adresten&lt;/a&gt; kayıt oluyorsunuz. Ubuntu hesabınızın olması gerektiğini unutmayın. Sistem size bir API token sağlayacak bunu bir yere not edin&lt;/p&gt;

&lt;p&gt;Ardından vakti zamanında sisteme gelen ve ulan ne işime yarayacak bu paket yöneticisi zaten apt varya dediğim o ilginç paket yöneticisini kullanacağız.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo snap install canonical-livepatch
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Şimdi bunu kurduktan hemen sonra yukarda aldığımız &lt;strong&gt;API Tokeni&lt;/strong&gt; tekrar elimize alıyoruz ve şu şekilde sisteme ekliyoruz.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo canonical-livepatch enable [API TOken]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Ardından aktif edildi işte şudur budur falan diyecek ve işlem son bulacak ancak burada dikkat etmeniz gereken üye olduğunuz hesap ile sadece 3 adet sistem üzerine ücretsiz olarak kurabiliyor olmanız.&lt;/p&gt;

&lt;p&gt;İyi yanları&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ücretsiz bir şekilde sunuluyor olması&lt;/li&gt;
  &lt;li&gt;Önemli güncelleştirmeleri sistemin otomatik olarak yapacak olması&lt;/li&gt;
  &lt;li&gt;Belkide en önemlisi sistemi yeniden başlatma zahmetinin olmaması&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Kötü yanları&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;3 Sisteme kadar ücretsiz olması(benim kafamdaki sayı 6)&lt;/li&gt;
  &lt;li&gt;Yıllık ücretinin 750 dolar olması(gider REDHAT alırız daha iyi)&lt;/li&gt;
  &lt;li&gt;Herhangi bir yere üyelik gerektirmesi&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ücretsiz alacak olan adama üyelik gerektirebilirsin ek özellikler verirsin şudur budur dersin eyvallah ancak ücretsiz kullanacak olan arkadaşa tek cihaza sisteme kurulan uygulama üzerinden bir uuid verdirmek daha hoş ve daha pratik olurdu diye düşünüyorum.&lt;/p&gt;

&lt;p&gt;Ayrıca unutmadan bahsedeyim sistemdeki &lt;strong&gt;livepatch&lt;/strong&gt; durumunu görmek isteyen arkadaşlar için&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;canonical-livepatch status --verbose
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;komutu oldukça işe yarayacak…&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;dipnot:&lt;/strong&gt; sisteme gelen güncelleştirmeleri otomatik olarak yapmaz sadece 3 haftada 1 kereye mahsus olmak üzere kritik kernel güncelleştirmelerini yapacak şekilde ayarlanmış bir özelliktir.&lt;/p&gt;

&lt;p&gt;öptüm bye &amp;lt;3&lt;/p&gt;
</description>
                <link>https://mertcangokgoz.com/ubuntu-sunucular-icin-livepatch-ozelligi/</link>
                <guid>https://mertcangokgoz.com/ubuntu-sunucular-icin-livepatch-ozelligi</guid>
                <pubDate>Tue, 25 Oct 2016 00:00:00 +0300</pubDate>
        </item>

        <item>
                <title>Debian Üzerine Gogs Kurulum ve Konfigürasyonu</title>
                <description>&lt;p&gt;&lt;strong&gt;Self-hosted&lt;/strong&gt; olarak kullanılabilecek en güzel uygulamalardan 2.si olan &lt;strong&gt;Gogs&lt;/strong&gt;, gitlab’a göre daha hızlı ve daha az sistem kaynaklarını tüketen bir git uygulaması ikisini kuran bilir biri 4 GB lik bir sistem isterken diğeri hiç bir sorun çıkartmadan 1 GB lik bir sistemde çalışabiliyor. kişisel kullanımlar için oldukça güzel ve arayüzü oldukça başarılı&lt;/p&gt;

&lt;p&gt;İşleme başlamadan hemen önce &lt;code class=&quot;highlighter-rouge&quot;&gt;hostname&lt;/code&gt; ayarlıyoruz.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;echo &quot;venus&quot; &amp;gt; /etc/hostname
hostname -F /etc/hostname
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Şimdi IP adresi hostname ile ilişkilendirelim. Bunun için şu adımı uygulayabilirsiniz.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nano /etc/hosts/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;içerisine tanımladığımız hostname ye IP adresini tanımlıyoruz. &lt;code class=&quot;highlighter-rouge&quot;&gt;venus&lt;/code&gt; hostnameine direk olarak &lt;code class=&quot;highlighter-rouge&quot;&gt;162.243.73.162&lt;/code&gt; numaralı ip adresini tanımladık ve şu şekilde tamamlandı kayıt edip çıkışımızı yapıyoruz.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1	localhost
127.0.0.1	debian
162.243.73.162	venus
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;yada&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;hostnamectl set-hostname venus
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;tabi bundan sonra ip tanımlaması yapmanız gerekiyor. Kendisi IP tanımlaması yapmaz sadece &lt;code class=&quot;highlighter-rouge&quot;&gt;hostname&lt;/code&gt; ayarlaması yapar&lt;/p&gt;

&lt;p&gt;Ayarlamamızı yaptıktan sonra şimdi kurulum işlemlerine rahatlıkla geçebiliriz. İlk olarak sistemi güncelliyoruz.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get update &amp;amp;&amp;amp; sudo apt-get upgrade
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Güncelleme işleminden hemen sonra &lt;code class=&quot;highlighter-rouge&quot;&gt;git&lt;/code&gt; uygulamasını sisteme dahil ediyoruz.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install git
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;İşlemleri yapacağımız bir kullanıcı ekliyoruz. Gerekli değil ama ekleseniz hiç fena olmaz ben &lt;code class=&quot;highlighter-rouge&quot;&gt;gitclient&lt;/code&gt; adında bir kullanıcı oluşturdum&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo adduser --disabled-login --gecos 'Gogs' gitclient
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Kurulumlar için gitclient kullanıcısı ile giriş yapıyoruz ve go kurulumunu gerçekleştiriyoruz.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo su - gitclient
mkdir $HOME/local &amp;amp;&amp;amp; cd $_
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Şimdi normalde debian depoları içerisindeki golang paketini kurardık ancak &lt;strong&gt;Gogs&lt;/strong&gt; 1.7 sürümü ve üstünü istediği için indirip ekleyeceğiz&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget https://storage.googleapis.com/golang/go1.7.linux-amd64.tar.gz
tar -C /home/gitclient/local -xvzf go1.7.linux-amd64.tar.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Şimdi gerekli olan &lt;code class=&quot;highlighter-rouge&quot;&gt;.bashrc&lt;/code&gt; düzenlemesini yapıyoruz. el ile düzenleyebileceğiniz gibi aşağıdaki gibi de ekleme yapabilirsiniz.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;echo 'export GOROOT=$HOME/local/go' &amp;gt;&amp;gt; $HOME/.bashrc
echo 'export GOPATH=$HOME/go' &amp;gt;&amp;gt; $HOME/.bashrc
echo 'export PATH=$PATH:$GOROOT/bin:$GOPATH/bin' &amp;gt;&amp;gt; $HOME/.bashrc
source $HOME/.bashrc
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Kullandığınız terminalden çıkış yapıp tekrar girdiğinizde işlem tamamlanmış olacak. &lt;code class=&quot;highlighter-rouge&quot;&gt;go version&lt;/code&gt; dediğimizde çıktı veriyor ise artık &lt;strong&gt;go&lt;/strong&gt; kullanabiliriz demektir.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;go get -u github.com/gogits/gogs
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;indirme işlemi tamamlandıktan sonra kaynak dosyanın bulunduğu dizine geçiyoruz ve derleme işlemini başlatıyoruz.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd $GOPATH/src/github.com/gogits/gogs
go build
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;İşlem tamamlandıktan sonra servisi çalıştırabiliriz.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./gogs web
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Direk olarak uygulama localde &lt;code class=&quot;highlighter-rouge&quot;&gt;3000&lt;/code&gt; portunu dinlemeye başlayacak. Ama ben bunu değiştireceğim.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./gogs web --port=1990
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Şimdi sıra geldi veritabanı’nı ayarlamaya bunun için önerilen mysql olsada biz &lt;strong&gt;postgreSQL&lt;/strong&gt; kullanalım ama önce &lt;code class=&quot;highlighter-rouge&quot;&gt;gitclient&lt;/code&gt; kullanıcısından çıkış yapalım&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;exit&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Veritabanı için kurulumu gerçekleştirelim&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install postgresql postgresql-client libpq-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;postgresql konsoluna giriş yapalım&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo -u postgres psql -d template1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;yeni bir kullanıcı oluşturalım ve parolasını belirleyelim.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CREATE USER gogsweb CREATEDB;
\password gogsweb
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Veritabanını oluşturalım.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CREATE DATABASE gogs OWNER gogsweb;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;psql&lt;/code&gt; konsolundan çıkış yapalım&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;\q
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Merak edenler &lt;strong&gt;PostgreSQL&lt;/strong&gt; de kullanabileceği komutları gösteren &lt;a href=&quot;https://mertcangokgoz.com/postgresql-komut-ve-kisayollari/&quot;&gt;Komut ve kısayollar&lt;/a&gt; makalemize göz atabilirler.&lt;/p&gt;

&lt;p&gt;Şimdi sıra geldi &lt;strong&gt;NGINX&lt;/strong&gt; ile gogs uygulamasını proxy işlemi ile genele açmaya bunun için aşağıdakileri uygulamanız yeterli&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install nginx
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Kurulum tamamlandıktan sonra aşağıdaki komutun tamamını kopyalayıp terminale yapıştırın. &lt;strong&gt;SSL&lt;/strong&gt; kullanacağımız için self-signed &lt;strong&gt;SSL&lt;/strong&gt; olması yeterli diye düşünüyorum bunun için daha önceden hazırladığımız &lt;a href=&quot;https://mertcangokgoz.com/nginx-icin-self-signed-ssl-sertifikasi-olusturma&quot;&gt;NGINX İçin Self-Signed SSL Sertifikası Oluşturma&lt;/a&gt; makalemize göz atabilirsiniz.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cat &amp;gt; /etc/nginx/sites-available/default &amp;lt;&amp;lt;EOF
server {
    listen 80 default_server;
    listen [::]:80 default_server;
    
    server_name git.mertcangokgoz.com;
    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl;
    listen [::]:443 ssl;
    
    server_name git.mertcangokgoz.com;

    ssl_certificate /path/to/git.mertcangokgoz.com.crt;
    ssl_certificate_key /path/to/git.mertcangokgoz.com.key;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;

	ssl_dhparam /path/to/dhparam.pem;

    ssl_protocols TLSv1.2;
    ssl_prefer_server_ciphers on;

    ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256';

    add_header Strict-Transport-Security max-age=31536000;

    location / {
        proxy_set_header X-Real-IP $remote_addr;
        proxy_pass http://localhost:1990;
    }
}
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;ardından nginx’imizi yeniden başlatıyoruz.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl restart nginx
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;İşlemimiz tamamlandı artık alan adınızdan kişisel git sisteminize ulaşabilirsiniz. Ama bir sorunumuz var oda sistem yeniden başlatıldığında uygulamaların başlatılamaması onun içinde aşağıdaki gibi bir &lt;strong&gt;service&lt;/strong&gt; düzenleyebilirsiniz.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo nano /etc/systemd/system/gogs.service
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;dosyanın içeriği aşağıdaki gibi olmalı kullanıcı adınızı değiştirdiyseniz ona göre düzenlemeyi unutmayın&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[Unit]
Description=Gogs (Go Git Service)
After=syslog.target
After=network.target
After=postgresql.service
After=nginx.service

[Service]
Type=simple
User=gitclient
Group=gitclient
WorkingDirectory=/home/gitclient/go/src/github.com/gogits/gogs
ExecStart=/home/gitclient/go/src/github.com/gogits/gogs/gogs web
Restart=always
Environment=USER=gitclient HOME=/home/gitclient

[Install]
WantedBy=multi-user.target
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Servisi aktif hale getirip başlatıyoruz.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo systemctl enable gogs
sudo systemctl start gogs
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Bundan sonra ise yukarıdaki ayarlamış olduğumuz veritabanı bilgileri ile kurulumu sonlandırmak&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Veritabanı bağlantısı : 127.0.0.1:5432
Veritabanı kullanıcısı :  gogsweb
Veritabanı adı: gogs
Veritabanı parola: &amp;lt;belirlediğiniz şifreniz&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Tüm işlemleri tamamladıktan sonra direk olarak &lt;code class=&quot;highlighter-rouge&quot;&gt;Install&lt;/code&gt; butonuna bastığınızda işlemimiz tamamlanmış olacak ve alan adınızdan rahatlıkla giriş yapabileceksiniz.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Bu kadar iş ile uğraşamam bana kolay yöntemini ver diyorsanız oda şu şekilde&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget -qO - https://deb.packager.io/key | sudo apt-key add -
echo &quot;deb https://deb.packager.io/gh/pkgr/gogs jessie pkgr&quot; | sudo tee /etc/apt/sources.list.d/gogs.list
sudo apt-get update
sudo apt-get install gogs
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Kullanılacak olan paketleri ekleyip güncelleme işlemini yapıyoruz ardından &lt;code class=&quot;highlighter-rouge&quot;&gt;gogs&lt;/code&gt; paketini direk olarak sisteme ekliyoruz.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;APP_NAME=&quot;gogs&quot;
MYSQL_PASSWORD=&quot;&amp;lt;kullanılacak olan şifre&amp;gt;&quot;
HOSTNAME=&quot;git.mertcangokgoz.com&quot;

# setup mysql server and database
debconf-set-selections &amp;lt;&amp;lt;CONFIG
mysql-server-5.5 mysql-server/root_password password ${MYSQL_PASSWORD}
mysql-server-5.5 mysql-server/root_password_again password ${MYSQL_PASSWORD}
CONFIG
apt-get install -y --force-yes mysql-server
mysql -uroot -p${MYSQL_PASSWORD} -e &quot;create database if not exists ${APP_NAME};&quot;

# setup nginx configuration
apt-get install -y nginx
cat &amp;gt; /etc/nginx/sites-available/default &amp;lt;&amp;lt;EOF
server {
  listen          80;
  server_name     ${HOSTNAME};
  location / {
    proxy_pass      http://localhost:3000;
  }
}
EOF
sudo service nginx restart
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Buda kolay kurulum yöntemi bu kurulumun kötü yanı  &lt;strong&gt;SSL&lt;/strong&gt; olmaması ve &lt;strong&gt;MySQL&lt;/strong&gt; ile kullanılıyor olması isterseniz bu yöntemi de kullanabilirsiniz.&lt;/p&gt;

&lt;p&gt;öptüm bye &amp;lt;3&lt;/p&gt;
</description>
                <link>https://mertcangokgoz.com/debian-uzerine-gogs-kurulum-ve-konfigurasyonu/</link>
                <guid>https://mertcangokgoz.com/debian-uzerine-gogs-kurulum-ve-konfigurasyonu</guid>
                <pubDate>Sat, 22 Oct 2016 00:00:00 +0300</pubDate>
        </item>

        <item>
                <title>GPG Yedekleme Ve Yedekten Geri Yükleme İşlemi</title>
                <description>&lt;p&gt;Sık sık gpg anahtarını yedekleyip geri yükleyen birisiydim. Sorunlar karşısında çözüme ulaşmak yerine formatı atıp geçerdim ancak artık öyle değil. Ancak bu işlemleri yaparken oldukça fazla vakit geçiriyordum ya bu nasıl yedeklenecek yada nasıl yedekten geri yüklenecek derken bir kaç yöntem keşfettim google amca sağolsun…&lt;/p&gt;

&lt;p&gt;public ve secret anahtarları bununla birlikte trust veritabanının yedeklenmesi işlemi&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cp ~/.gnupg/pubring.gpg /media/mertcan/USB1/GPG/
cp ~/.gnupg/secring.gpg /media/mertcan/USB1/GPG/
cp ~/.gnupg/trustdb.gpg /media/mertcan/USB1/GPG/
gpg --export-ownertrust &amp;gt; mertcangokgoz-ownertrust-gpg.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;yedeklenen bu dosyaların geri yüklenmesi işlemi&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cp /media/mertcan/USB1/GPG/*.gpg ~/.gnupg/
gpg --import-ownertrust mertcangokgoz-ownertrust-gpg.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;2.yöntem olarak kendi keyiniz dışındakilerde sıkıntınız yoksa yani yedeklemek istemeyecekseniz.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gpg -a --export admin@mertcangokgoz.com &amp;gt; mertcangokgoz-public-gpg.key
gpg -a --export-secret-keys admin@mertcangokgoz.com &amp;gt; mertcangokgoz-secret-gpg.key
gpg --export-ownertrust &amp;gt; mertcangokgoz-ownertrust-gpg.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;yedeklediklerinizden geri yüklemek için ise&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gpg --import mertcangokgoz-secret-gpg.key
gpg --import-ownertrust mertcangokgoz-ownertrust-gpg.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;öptüm bye &amp;lt;3&lt;/p&gt;
</description>
                <link>https://mertcangokgoz.com/gpg-yedekleme-ve-yedekten-geri-yukleme-islemi/</link>
                <guid>https://mertcangokgoz.com/gpg-yedekleme-ve-yedekten-geri-yukleme-islemi</guid>
                <pubDate>Thu, 20 Oct 2016 00:00:00 +0300</pubDate>
        </item>

        <item>
                <title>Nginx İçin Self-Signed SSL Sertifikası Oluşturma</title>
                <description>&lt;p&gt;Nginx için &lt;strong&gt;SSL&lt;/strong&gt; sertifikasını ayarlamak oldukça basittir hele ki bu işlem self-signed ise ve özellikle &lt;strong&gt;cloudflare&lt;/strong&gt; gibi bir aracı kullanılacak ise daha iyi olacaktır. Direk olarak cloudflare Mitm olayından etkilenmemiş olursunuz ama gene etkilenirsiniz.&lt;/p&gt;

&lt;p&gt;Ben bahsettiğim gibi Cloudflare’yi araya alacaksam böyle bir yöntemi kullanıyorum. Diğer türlü araya &lt;strong&gt;Cloudflare&lt;/strong&gt; girmeyecek ise o zaman yapacaklarımız tabi ki farklı olacak&lt;/p&gt;

&lt;p&gt;Nginx klasörü içerisine &lt;code class=&quot;highlighter-rouge&quot;&gt;ssl&lt;/code&gt; adında bir klasör oluşturuyoruz.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir /etc/nginx/ssl
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;daha sonra veriyoruz sihirli komutu&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/nginx/ssl/mertcangokgoz.com.key -out /etc/nginx/ssl/mertcangokgoz.com.crt
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;RSA da kullandığımız bit uzunluğumuz çok olduğu için sisteminize göre baya sürebilir. Çok sürmesini istemiyorsanız &lt;a href=&quot;https://mertcangokgoz.com/babaya-kullanilabilir-entropi-lazim/&quot;&gt;Baba’ya Kullanılabilir Entropi Lazım&lt;/a&gt; makalemizdeki adımları uygulayarak işlemleri hızlandırabilirsiniz.&lt;/p&gt;

&lt;p&gt;Bizden istediklerini güzelce dolduruyoruz.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Country Name (2 letter code) [AU]:TR
State or Province Name (full name) [Some-State]:Ankara
Locality Name (eg, city) []:Ankara
Organization Name (eg, company) [Internet Widgits Pty Ltd]:Mertcan, Inc.
Organizational Unit Name (eg, section) []:
Common Name (e.g. server FQDN or YOUR name) []:mertcangokgoz.com
Email Address []:admin@mertcangokgoz.com
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Ardından SSL oluşturulma işlemine başlanılacak zaten yerini ayarladığımız içinde &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/nginx/ssl&lt;/code&gt; içerisine &lt;code class=&quot;highlighter-rouge&quot;&gt;.key&lt;/code&gt; ve &lt;code class=&quot;highlighter-rouge&quot;&gt;.crt&lt;/code&gt; çıkacak&lt;/p&gt;

&lt;p&gt;Forward Secrecy olayını gerçekleştirmek için &lt;code class=&quot;highlighter-rouge&quot;&gt;dhparam.pem&lt;/code&gt; ihtiyacımızı karşılamalıyız.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;İletme gizliliği&lt;/strong&gt;(Forward Secrecy) kavramı basittir: Sunucudan &lt;strong&gt;RSA&lt;/strong&gt; özel istemci ve sunucu arasında bir &lt;strong&gt;Diffie-Hellman&lt;/strong&gt; anahtar değişimini imzalamak için kullanılır. El sıkışma ile elde edilen pre-master anahtar, şifreleme için kullanılır. Ana anahtar bir istemci ve sunucu arasında geçen bir bağlantıya özgüdür ve yalnızca sınırlı bir süre için kullanılır, ömrü kısadır daha sonrasında kullanılmaz.&lt;/p&gt;

&lt;p&gt;İletme Gizliliği ile, bir saldırgan sunucunun özel anahtarını eline geçirirse, geçmiş iletişim şifresini çözmek saldırgan için mümkün olmayacaktır. Özel anahtar sadece pre-master anahtarı ortaya koymuyor, ki &lt;strong&gt;DH&lt;/strong&gt; yi, imzalamak için kullanıyor. Pre-master anahtarlar hiçbir zaman istemci ve sunucu arasında bir saldırgan tarafından yapılan ve tespit edilemeyen &lt;strong&gt;MITM’leri&lt;/strong&gt; engeller.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd /etc/nginx/ssl/
openssl dhparam -out dhparam.pem 4096
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Daha sonrasında gerekli olan düzenlemeleri şu şekilde yapıyoruz ve konfigürasyon dosyamız hazır olmuş oluyor.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server {
    listen 80 default_server;
    listen [::]:80 default_server;
    server_name git.mertcangokgoz.com;
    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl;
    listen [::]:443 ssl;
    server_name git.mertcangokgoz.com;
    # certs sent to the client in SERVER HELLO are concatenated in ssl_certificate
    ssl_certificate /etc/nginx/ssl/mertcangokgoz.com.crt;
    ssl_certificate_key /etc/nginx/ssl/mertcangokgoz.com.key;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;

    # Diffie-Hellman parameter for DHE ciphersuites, recommended 4096 bits
    ssl_dhparam /etc/nginx/ssl/dhparam.pem;

    # modern configuration. tweak to your needs.
    ssl_protocols TLSv1.2;
    ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256';
    ssl_prefer_server_ciphers on;

    # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)
    add_header Strict-Transport-Security max-age=15768000;

    location / {
	    try_files $uri $uri/ =404;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Bu işlemlerden sonra &lt;code class=&quot;highlighter-rouge&quot;&gt;nginx -t&lt;/code&gt; çalıştırıyoruz. Test sonucumuz aşağıdaki gibi olursa&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nginx: the configuration file /etc/nginx/nginx.conf syntax is ok
nginx: configuration file /etc/nginx/nginx.conf test is successful
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Tekrardan &lt;code class=&quot;highlighter-rouge&quot;&gt;reload&lt;/code&gt; yapıyoruz yada yeniden başlatıyoruz. ve ayarların geçerliliğini sağlıyoruz.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nginx -s reload
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;veya&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl restart nginx
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;öptüm bye &amp;lt;3&lt;/p&gt;
</description>
                <link>https://mertcangokgoz.com/nginx-icin-self-signed-ssl-sertifikasi-olusturma/</link>
                <guid>https://mertcangokgoz.com/nginx-icin-self-signed-ssl-sertifikasi-olusturma</guid>
                <pubDate>Tue, 18 Oct 2016 00:00:00 +0300</pubDate>
        </item>

        <item>
                <title>Nginx İçin Basit Kimlik Doğrulama Modülü</title>
                <description>&lt;p&gt;Web sitenizde gelen ziyaretçilerin bazı alanlara ulaşmasını istemiyorsanız. Basit ama etkili olan bu yöntemi kullanabilirsiniz. Bize gerekli olan apache için kullanılan &lt;code class=&quot;highlighter-rouge&quot;&gt;htpasswd&lt;/code&gt; yi nginx içinde kullanmak&lt;/p&gt;

&lt;p&gt;İlk önce apache2 de kullanılan &lt;code class=&quot;highlighter-rouge&quot;&gt;utils&lt;/code&gt; paketini sisteme dahil edelim&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apt-get install apache2-utils
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;kurulumu yaptıktan sonra kullanıcı oluşturmamız gerekiyor bunu isterseniz web sitelerini kullanarak isterseniz de aşağıdaki komut ile oluşturabilirsiniz.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;htpasswd -c /etc/nginx/.htpasswd Mertcan
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Kullanıcı için parola tanımladık ve aşağıdaki gibi işlemi tamamladık&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;New password:
Re-type new password:
Adding password for user Mertcan
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Kullanıcımızı ve bu kullanıcıya ait gerekli parolayı oluşturma işlemimizi tamamladık. Şimdi nginx konfigürasyon dosyamızı kurcalamaya geldi sıra kullanıcılara kısıtlayacağımız yerin &lt;code class=&quot;highlighter-rouge&quot;&gt;location&lt;/code&gt; bloğu içerisine aşağıdaki satırları ekliyoruz.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;auth_basic &quot;Yetkili Kullanici Girisi&quot;;
auth_basic_user_file /etc/nginx/.htpasswd;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;bu işlemin hemen ardından tanımladığınız kullanıcı adı ve parola ile sisteme giriş yapabilmenin aktif olabilmesi için nginxi yeniden başlatıyoruz veya &lt;code class=&quot;highlighter-rouge&quot;&gt;reload&lt;/code&gt; yapıyoruz.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nginx -s reload
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Bu işlemden sonra kısıtladığınız alana tnaımladığınız kullanıcı adı ve parola ile sadece siz ve belirlediğiniz kişiler girebilir bir duruma getirdik.&lt;/p&gt;

&lt;p&gt;öptüm bye &amp;lt;3&lt;/p&gt;
</description>
                <link>https://mertcangokgoz.com/nginx-icin-basit-kimlik-dogrulama-modulu/</link>
                <guid>https://mertcangokgoz.com/nginx-icin-basit-kimlik-dogrulama-modulu</guid>
                <pubDate>Sun, 16 Oct 2016 00:00:00 +0300</pubDate>
        </item>

        <item>
                <title>Debian Üzerine GitLab Kurulumu( Omnibus Yöntemi)</title>
                <description>&lt;p&gt;Piyasada &lt;code class=&quot;highlighter-rouge&quot;&gt;self-hosted&lt;/code&gt; olarak kullanabileceğiniz pek çok git uygulaması bulunmuyor. İçlerinden 2 tanesi oldukça güzel bizim için bu yüzdende birisini seçmemiz gerekiyordu ve bu anlatımda &lt;code class=&quot;highlighter-rouge&quot;&gt;GitLab&lt;/code&gt; seçtim hem özellikleri oldukça güzel hemde topluluk sürümü diğer uygulamalara göre daha çok özelliği bünyesinde barındırıyor.&lt;/p&gt;

&lt;p&gt;Bu anlatım sırasında &lt;strong&gt;Debian 8.6&lt;/strong&gt; işletim sistemi ve 4 GB ramli bir sunucu tercih ettim. Daha hızlı işlem yapabilmemiz için ramin yüksek olması gerekiyor. Minimum 1 GB ram kullanabiliriz ama swap alanının 4 gb kadar olması gerekiyor.&lt;/p&gt;

&lt;p&gt;Temel kurulum işlemlerimiz &lt;strong&gt;SMTP&lt;/strong&gt; servislerimiz ve bu servisin ihtiyaç duyduğu paketler ile gerekenlerin kurulması&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apt-get install -y curl openssh-server ca-certificates postfix sudo
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Şimdi depo yu sistemimize dahil edelim topluluk sürümünü kullanacağımız için durum şu şekilde olacak&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -sS https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.deb.sh | sudo bash
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Kurulumu yapmadan önce sistemdeki git sürümünü kontrol ediyoruz. çünkü Gitlab git 2.7.4 ve üst sürümlerde sıkıntısız çalışabiliyor.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git --version
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Sürüm çıktısı 2.7.4 den düşük ise lütfen sisteminizde bu konuda bir güncelleme yapınız. Tüm her şeyin tamamlandığını düşünüyorsanız. Kuruluma geçebilirsiniz.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apt-get install gitlab-ce
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Yaklaşık &lt;strong&gt;301 MB&lt;/strong&gt; kadar gerekli olan dosyasını indirecek ve sisteme dahil edecek ardından şu şekilde bir çıktı ile karşılaşacaksınız.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;       *.                  *.
      ***                 ***
     *****               *****
    .******             *******
    ********            ********
   ,,,,,,,,,***********,,,,,,,,,
  ,,,,,,,,,,,*********,,,,,,,,,,,
  .,,,,,,,,,,,*******,,,,,,,,,,,,
      ,,,,,,,,,*****,,,,,,,,,.
         ,,,,,,,****,,,,,,
            .,,,***,,,,
                ,*,.
     _______ __  __          __
    / ____(_) /_/ /   ____ _/ /_
   / / __/ / __/ /   / __ `/ __ \
  / /_/ / / /_/ /___/ /_/ / /_/ /
  \____/_/\__/_____/\__,_/_.___/

gitlab: Thank you for installing GitLab!
gitlab: To configure and start GitLab, RUN THE FOLLOWING COMMAND:

sudo gitlab-ctl reconfigure

gitlab: GitLab should be reachable at http://debian-4gb-nyc2-01
gitlab: Otherwise configure GitLab for your system by editing /etc/gitlab/gitlab.rb file
gitlab: And running reconfigure again.
gitlab:
gitlab: For a comprehensive list of configuration options please see the Omnibus GitLab readme
gitlab: https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/README.md
gitlab:
It looks like GitLab has not been configured yet; skipping the upgrade script.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Şimdi sıra yukarıdaki çıktının da bize söylediği gibi ayarlamalarını yapmamız gerekiyor böylelikle tüm herşeyi tamamlamış olacağız.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo gitlab-ctl reconfigure
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Terminal ekranınızda uzunca bir süre bir takım yazılar kayacak sistem ekipmanlarını çalıştıracak kurulumları gerçekleştirecek.&lt;/p&gt;

&lt;p&gt;Kurulumun tamamlandığını şununla anlayabilirsiniz.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Running handlers:
Running handlers complete
Chef Client finished, 223/311 resources updated in 01 minutes 38 seconds
gitlab Reconfigured!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Bu şekilde ön tanımlı kurulumu gerçekleştirdik. Ancak isterseniz de aşağıdaki dosyayı düzenleyerek özel bir kurulum gerçekleştirebilirsiniz.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nano /etc/gitlab/gitlab.rb
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Peki bu dosyamızın içeriğinde neler var&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;## Configuration options with # in front are not active and they were
## valid at install time. Updating the package does not update this file
## automatically.
## Latest options listed at:
## https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/files/gitlab-config-template/gitlab.rb.template


## Url on which GitLab will be reachable.
## For more details on configuring external_url see:
## https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/doc/settings/configuration.md#configuring-the-external-url-for-gitlab
external_url &amp;#39;GENERATED_EXTERNAL_URL&amp;#39;


## Note: configuration settings below are optional.
## Uncomment and change the value.
############################
# gitlab.yml configuration #
############################

# gitlab_rails[&amp;#39;gitlab_ssh_host&amp;#39;] = &amp;#39;ssh.host_example.com&amp;#39;
# gitlab_rails[&amp;#39;time_zone&amp;#39;] = &amp;#39;UTC&amp;#39;
# gitlab_rails[&amp;#39;gitlab_email_enabled&amp;#39;] = true
# gitlab_rails[&amp;#39;gitlab_email_from&amp;#39;] = &amp;#39;example@example.com&amp;#39;
# gitlab_rails[&amp;#39;gitlab_email_display_name&amp;#39;] = &amp;#39;Example&amp;#39;
# gitlab_rails[&amp;#39;gitlab_email_reply_to&amp;#39;] = &amp;#39;noreply@example.com&amp;#39;
# gitlab_rails[&amp;#39;gitlab_default_can_create_group&amp;#39;] = true
# gitlab_rails[&amp;#39;gitlab_username_changing_enabled&amp;#39;] = true
# gitlab_rails[&amp;#39;gitlab_default_theme&amp;#39;] = 2
# gitlab_rails[&amp;#39;gitlab_default_projects_features_issues&amp;#39;] = true
# See http://doc.gitlab.com/ce/customization/issue_closing.html for more information about this pattern.
# gitlab_rails[&amp;#39;gitlab_issue_closing_pattern&amp;#39;] = &amp;quot;((?:[Cc]los(?:e[sd]?|ing)|[Ff]ix(?:e[sd]|ing)?) +(?:(?:issues? +)?%{issue_ref}(?:(?:, *| +and +)?))+)&amp;quot;
# gitlab_rails[&amp;#39;gitlab_default_projects_features_merge_requests&amp;#39;] = true
# gitlab_rails[&amp;#39;gitlab_default_projects_features_wiki&amp;#39;] = true
# gitlab_rails[&amp;#39;gitlab_default_projects_features_snippets&amp;#39;] = false
# gitlab_rails[&amp;#39;gitlab_default_projects_features_builds&amp;#39;] = true
# gitlab_rails[&amp;#39;gitlab_default_projects_features_container_registry&amp;#39;] = true
# gitlab_rails[&amp;#39;gitlab_repository_downloads_path&amp;#39;] = &amp;#39;tmp/repositories&amp;#39;
# gitlab_rails[&amp;#39;gravatar_plain_url&amp;#39;] = &amp;#39;http://www.gravatar.com/avatar/%{hash}?s=%{size}&amp;amp;d=identicon&amp;#39;
# gitlab_rails[&amp;#39;gravatar_ssl_url&amp;#39;] = &amp;#39;https://secure.gravatar.com/avatar/%{hash}?s=%{size}&amp;amp;d=identicon&amp;#39;
# gitlab_rails[&amp;#39;stuck_ci_builds_worker_cron&amp;#39;] = &amp;quot;0 0 * * *&amp;quot;

# See http://docs.gitlab.com/ce/ci/yaml/README.html#artifacts:expire_in
# gitlab_rails[&amp;#39;expire_build_artifacts_worker_cron&amp;#39;] = &amp;quot;50 * * * *&amp;quot;

# gitlab_rails[&amp;#39;repository_check_worker_cron&amp;#39;] = &amp;quot;20 * * * *&amp;quot;
# gitlab_rails[&amp;#39;admin_email_worker_cron&amp;#39;] = &amp;quot;0 0 * * 0&amp;quot;
# gitlab_rails[&amp;#39;repository_archive_cache_worker_cron&amp;#39;] = &amp;quot;0 * * * *&amp;quot;
# gitlab_rails[&amp;#39;historical_data_worker_cron&amp;#39;] = &amp;quot;0 12 * * *&amp;quot;
# gitlab_rails[&amp;#39;update_all_mirrors_worker_cron&amp;#39;] = &amp;quot;0 * * * *&amp;quot;
# gitlab_rails[&amp;#39;update_all_remote_mirrors_worker_cron&amp;#39;] = &amp;quot;30 * * * *&amp;quot;
# gitlab_rails[&amp;#39;ldap_sync_worker_cron&amp;#39;] = &amp;quot;30 1 * * *&amp;quot;
# gitlab_rails[&amp;#39;geo_bulk_notify_worker_cron&amp;#39;] = &amp;quot;*/10 * * * * *&amp;quot;
# gitlab_rails[&amp;#39;webhook_timeout&amp;#39;] = 10
# gitlab_rails[&amp;#39;trusted_proxies&amp;#39;] = []

## Reply by email
# Allow users to comment on issues and merge requests by replying to notification emails.
# For documentation on how to set this up, see http://doc.gitlab.com/ce/incoming_email/README.html
# gitlab_rails[&amp;#39;incoming_email_enabled&amp;#39;] = true
#
# # The email address including the `%{key}` placeholder that will be replaced to reference the item being replied to.
# # The placeholder can be omitted but if present, it must appear in the &amp;quot;user&amp;quot; part of the address (before the `@`).
# gitlab_rails[&amp;#39;incoming_email_address&amp;#39;] = &amp;quot;gitlab-incoming+%{key}@gmail.com&amp;quot;
#
# # Email account username
# # With third party providers, this is usually the full email address.
# # With self-hosted email servers, this is usually the user part of the email address.
# gitlab_rails[&amp;#39;incoming_email_email&amp;#39;] = &amp;quot;gitlab-incoming@gmail.com&amp;quot;
# # Email account password
# gitlab_rails[&amp;#39;incoming_email_password&amp;#39;] = &amp;quot;[REDACTED]&amp;quot;
#
# # IMAP server host
# gitlab_rails[&amp;#39;incoming_email_host&amp;#39;] = &amp;quot;imap.gmail.com&amp;quot;
# # IMAP server port
# gitlab_rails[&amp;#39;incoming_email_port&amp;#39;] = 993
# # Whether the IMAP server uses SSL
# gitlab_rails[&amp;#39;incoming_email_ssl&amp;#39;] = true
# # Whether the IMAP server uses StartTLS
# gitlab_rails[&amp;#39;incoming_email_start_tls&amp;#39;] = false
#
# # The mailbox where incoming mail will end up. Usually &amp;quot;inbox&amp;quot;.
# gitlab_rails[&amp;#39;incoming_email_mailbox_name&amp;#39;] = &amp;quot;inbox&amp;quot;
#
# gitlab_rails[&amp;#39;incoming_email_log_directory&amp;#39;] = &amp;quot;/var/log/gitlab/mailroom&amp;quot;

## Build Artifacts
# gitlab_rails[&amp;#39;artifacts_enabled&amp;#39;] = true
# gitlab_rails[&amp;#39;artifacts_path&amp;#39;] = &amp;quot;/mnt/storage/artifacts&amp;quot;

## Git LFS
# gitlab_rails[&amp;#39;lfs_enabled&amp;#39;] = true
# gitlab_rails[&amp;#39;lfs_storage_path&amp;#39;] = &amp;quot;/mnt/storage/lfs-objects&amp;quot;

## ElasticSearch (EE only)
# gitlab_rails[&amp;#39;elasticsearch_enabled&amp;#39;] = false
# gitlab_rails[&amp;#39;elasticsearch_host&amp;#39;] = &amp;quot;localhost&amp;quot;
# gitlab_rails[&amp;#39;elasticsearch_port&amp;#39;] = 9200

## GitLab Pages (EE only)
# gitlab_rails[&amp;#39;pages_path&amp;#39;] = &amp;quot;/mnt/storage/pages&amp;quot;

## For setting up LDAP
## see https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/README.md#setting-up-ldap-sign-in
## Be careful not to break the indentation in the ldap_servers block. It is in
## yaml format and the spaces must be retained. Using tabs will not work.

# gitlab_rails[&amp;#39;ldap_enabled&amp;#39;] = false
# gitlab_rails[&amp;#39;ldap_servers&amp;#39;] = YAML.load &amp;lt;&amp;lt;-&amp;#39;EOS&amp;#39; # remember to close this block with &amp;#39;EOS&amp;#39; below
#   main: # &amp;#39;main&amp;#39; is the GitLab &amp;#39;provider ID&amp;#39; of this LDAP server
#     label: &amp;#39;LDAP&amp;#39;
#     host: &amp;#39;_your_ldap_server&amp;#39;
#     port: 389
#     uid: &amp;#39;sAMAccountName&amp;#39;
#     method: &amp;#39;plain&amp;#39; # &amp;quot;tls&amp;quot; or &amp;quot;ssl&amp;quot; or &amp;quot;plain&amp;quot;
#     bind_dn: &amp;#39;_the_full_dn_of_the_user_you_will_bind_with&amp;#39;
#     password: &amp;#39;_the_password_of_the_bind_user&amp;#39;
#     active_directory: true
#     allow_username_or_email_login: false
#     block_auto_created_users: false
#     base: &amp;#39;&amp;#39;
#     user_filter: &amp;#39;&amp;#39;
#     attributes:
#       username: [&amp;#39;uid&amp;#39;, &amp;#39;userid&amp;#39;, &amp;#39;sAMAccountName&amp;#39;]
#       email:    [&amp;#39;mail&amp;#39;, &amp;#39;email&amp;#39;, &amp;#39;userPrincipalName&amp;#39;]
#       name:       &amp;#39;cn&amp;#39;
#       first_name: &amp;#39;givenName&amp;#39;
#       last_name:  &amp;#39;sn&amp;#39;
#     ## EE only
#     group_base: &amp;#39;&amp;#39;
#     admin_group: &amp;#39;&amp;#39;
#     sync_ssh_keys: false
#
#   secondary: # &amp;#39;secondary&amp;#39; is the GitLab &amp;#39;provider ID&amp;#39; of second LDAP server
#     label: &amp;#39;LDAP&amp;#39;
#     host: &amp;#39;_your_ldap_server&amp;#39;
#     port: 389
#     uid: &amp;#39;sAMAccountName&amp;#39;
#     method: &amp;#39;plain&amp;#39; # &amp;quot;tls&amp;quot; or &amp;quot;ssl&amp;quot; or &amp;quot;plain&amp;quot;
#     bind_dn: &amp;#39;_the_full_dn_of_the_user_you_will_bind_with&amp;#39;
#     password: &amp;#39;_the_password_of_the_bind_user&amp;#39;
#     active_directory: true
#     allow_username_or_email_login: false
#     block_auto_created_users: false
#     base: &amp;#39;&amp;#39;
#     user_filter: &amp;#39;&amp;#39;
#     attributes:
#       username: [&amp;#39;uid&amp;#39;, &amp;#39;userid&amp;#39;, &amp;#39;sAMAccountName&amp;#39;]
#       email:    [&amp;#39;mail&amp;#39;, &amp;#39;email&amp;#39;, &amp;#39;userPrincipalName&amp;#39;]
#       name:       &amp;#39;cn&amp;#39;
#       first_name: &amp;#39;givenName&amp;#39;
#       last_name:  &amp;#39;sn&amp;#39;
#     ## EE only
#     group_base: &amp;#39;&amp;#39;
#     admin_group: &amp;#39;&amp;#39;
#     sync_ssh_keys: false
# EOS

## Setting up Kerberos (EE only)
## See http://doc.gitlab.com/ee/integration/kerberos.html#http-git-access
# gitlab_rails[&amp;#39;kerberos_enabled&amp;#39;] = true
# gitlab_rails[&amp;#39;kerberos_keytab&amp;#39;] = /etc/http.keytab
# gitlab_rails[&amp;#39;kerberos_service_principal_name&amp;#39;] = HTTP/gitlab.example.com@EXAMPLE.COM
# gitlab_rails[&amp;#39;kerberos_use_dedicated_port&amp;#39;] = true
# gitlab_rails[&amp;#39;kerberos_port&amp;#39;] = 8443
# gitlab_rails[&amp;#39;kerberos_https&amp;#39;] = true

## For setting up omniauth
## see https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/README.md#omniauth-google-twitter-github-login

# gitlab_rails[&amp;#39;omniauth_enabled&amp;#39;] = false
# gitlab_rails[&amp;#39;omniauth_allow_single_sign_on&amp;#39;] = [&amp;#39;saml&amp;#39;]
# gitlab_rails[&amp;#39;omniauth_auto_sign_in_with_provider&amp;#39;] = &amp;#39;saml&amp;#39;
# gitlab_rails[&amp;#39;omniauth_block_auto_created_users&amp;#39;] = true
# gitlab_rails[&amp;#39;omniauth_auto_link_ldap_user&amp;#39;] = false
# gitlab_rails[&amp;#39;omniauth_auto_link_saml_user&amp;#39;] = false
# gitlab_rails[&amp;#39;omniauth_external_providers&amp;#39;] = [&amp;#39;twitter&amp;#39;, &amp;#39;google_oauth2&amp;#39;]
# gitlab_rails[&amp;#39;omniauth_providers&amp;#39;] = [
#   {
#     &amp;quot;name&amp;quot; =&amp;gt; &amp;quot;google_oauth2&amp;quot;,
#     &amp;quot;app_id&amp;quot; =&amp;gt; &amp;quot;YOUR APP ID&amp;quot;,
#     &amp;quot;app_secret&amp;quot; =&amp;gt; &amp;quot;YOUR APP SECRET&amp;quot;,
#     &amp;quot;args&amp;quot; =&amp;gt; { &amp;quot;access_type&amp;quot; =&amp;gt; &amp;quot;offline&amp;quot;, &amp;quot;approval_prompt&amp;quot; =&amp;gt; &amp;quot;&amp;quot; }
#   }
# ]
#
# If you setup bitbucket importer under omniauth providers you will need to add the keys
# which will allow connection between bitbucket and gitlab.
# For details see http://doc.gitlab.com/ce/integration/bitbucket.html
# gitlab_rails[&amp;#39;bitbucket&amp;#39;] = {
#  &amp;#39;known_hosts_key&amp;#39; =&amp;gt; &amp;#39;bitbucket.org,207.223.240.182 ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAubiN81eDcafrgMeLzaFPsw2kNvEcqTKl/VqLat/MaB33pZy0y3rJZtnqwR2qOOvbwKZYKiEO1O6VqNEBxKvJJelCq0dTXWT5pbO2gDXC6h6QDXCaHo6pOHGPUy+YBaGQRGuSusMEASYiWunYN0vCAI8QaXnWMXNMdFP3jHAJH0eDsoiGnLPBlBp4TNm6rYI74nMzgz3B9IikW4WVK+dc8KZJZWYjAuORU3jc1c/NPskD2ASinf8v3xnfXeukU0sJ5N6m5E8VLjObPEO+mN2t/FZTMZLiFqPWc/ALSqnMnnhwrNi2rbfg/rd/IpL8Le3pSBne8+seeFVBoGqzHM9yXw==&amp;#39;,
#  &amp;#39;private_key&amp;#39; =&amp;gt; &amp;#39;-----BEGIN RSA PRIVATE KEY-----
#   MIIEowIBAAKCAQEAyXxYHwz2KjcwSjTREwlhYHqrf/8U0UM8ej3cqQ551gE4Wo3t
#   -----END RSA PRIVATE KEY-----&amp;#39;,
#  &amp;#39;public_key&amp;#39; =&amp;gt; &amp;#39;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDJfFgfDPYqN git@gitlab.example.com&amp;#39;
# }

## For setting up backups
## see https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/README.md#backups

# gitlab_rails[&amp;#39;manage_backup_path&amp;#39;] = true
# gitlab_rails[&amp;#39;backup_path&amp;#39;] = &amp;quot;/var/opt/gitlab/backups&amp;quot;
# gitlab_rails[&amp;#39;backup_archive_permissions&amp;#39;] = 0644 # See: http://doc.gitlab.com/ce/raketasks/backup_restore.html#backup-archive-permissions
# gitlab_rails[&amp;#39;backup_pg_schema&amp;#39;] = &amp;#39;public&amp;#39;
# gitlab_rails[&amp;#39;backup_keep_time&amp;#39;] = 604800
# gitlab_rails[&amp;#39;backup_upload_connection&amp;#39;] = {
#   &amp;#39;provider&amp;#39; =&amp;gt; &amp;#39;AWS&amp;#39;,
#   &amp;#39;region&amp;#39; =&amp;gt; &amp;#39;eu-west-1&amp;#39;,
#   &amp;#39;aws_access_key_id&amp;#39; =&amp;gt; &amp;#39;AKIAKIAKI&amp;#39;,
#   &amp;#39;aws_secret_access_key&amp;#39; =&amp;gt; &amp;#39;secret123&amp;#39;
# }
# gitlab_rails[&amp;#39;backup_upload_remote_directory&amp;#39;] = &amp;#39;my.s3.bucket&amp;#39;
# gitlab_rails[&amp;#39;backup_multipart_chunk_size&amp;#39;] = 104857600
# gitlab_rails[&amp;#39;backup_encryption&amp;#39;] = &amp;#39;AES256&amp;#39; # Turns on AWS Server-Side Encryption with Amazon S3-Managed Keys for backups

## For setting up different data storing directory
## see https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/README.md#storing-git-data-in-an-alternative-directory
## If you want to use a single non-default directory to store git data use
## a path that doesn&amp;#39;t contain symlinks.
# git_data_dirs({&amp;quot;default&amp;quot; =&amp;gt; &amp;quot;/var/opt/gitlab/git-data&amp;quot;})

## For storing GitLab application uploads, eg. LFS objects, build artifacts
## see https://gitlab.com/gitlab-org/gitlab-ce/blob/master/doc/development/shared_files.md
# gitlab_rails[&amp;#39;shared_path&amp;#39;] = &amp;#39;/var/opt/gitlab/gitlab-rails/shared&amp;#39;

# DEPRECATED: gitlab_rails[&amp;#39;satellites_timeout&amp;#39;] = 30

## GitLab Shell settings for GitLab
# gitlab_rails[&amp;#39;gitlab_shell_ssh_port&amp;#39;] = 22
# gitlab_rails[&amp;#39;git_max_size&amp;#39;] = 20971520
# gitlab_rails[&amp;#39;git_timeout&amp;#39;] = 10

## Extra customization
# gitlab_rails[&amp;#39;extra_google_analytics_id&amp;#39;] = &amp;#39;_your_tracking_id&amp;#39;
# gitlab_rails[&amp;#39;extra_piwik_url&amp;#39;] = &amp;#39;_your_piwik_url&amp;#39;
# gitlab_rails[&amp;#39;extra_piwik_site_id&amp;#39;] = &amp;#39;_your_piwik_site_id&amp;#39;

# gitlab_rails[&amp;#39;env&amp;#39;] = {
#   &amp;#39;BUNDLE_GEMFILE&amp;#39; =&amp;gt; &amp;quot;/opt/gitlab/embedded/service/gitlab-rails/Gemfile&amp;quot;,
#   &amp;#39;PATH&amp;#39; =&amp;gt; &amp;quot;/opt/gitlab/bin:/opt/gitlab/embedded/bin:/bin:/usr/bin&amp;quot;
# }

# gitlab_rails[&amp;#39;rack_attack_git_basic_auth&amp;#39;] = {
#   &amp;#39;enabled&amp;#39; =&amp;gt; true,
#   &amp;#39;ip_whitelist&amp;#39; =&amp;gt; [&amp;quot;127.0.0.1&amp;quot;],
#   &amp;#39;maxretry&amp;#39; =&amp;gt; 10,
#   &amp;#39;findtime&amp;#39; =&amp;gt; 60,
#   &amp;#39;bantime&amp;#39; =&amp;gt; 3600
# }

# gitlab_rails[&amp;#39;rack_attack_protected_paths&amp;#39;] = [
#   &amp;#39;/users/password&amp;#39;,
#   &amp;#39;/users/sign_in&amp;#39;,
#   &amp;#39;/api/#{API::API.version}/session.json&amp;#39;,
#   &amp;#39;/api/#{API::API.version}/session&amp;#39;,
#   &amp;#39;/users&amp;#39;,
#   &amp;#39;/users/confirmation&amp;#39;,
#   &amp;#39;/unsubscribes/&amp;#39;,
#   &amp;#39;/import/github/personal_access_token&amp;#39;
# ]

# We do not recommend changing these directories.
# gitlab_rails[&amp;#39;dir&amp;#39;] = &amp;quot;/var/opt/gitlab/gitlab-rails&amp;quot;
# gitlab_rails[&amp;#39;log_directory&amp;#39;] = &amp;quot;/var/log/gitlab/gitlab-rails&amp;quot;

###############################
# GitLab application settings #
###############################

# gitlab_rails[&amp;#39;uploads_directory&amp;#39;] = &amp;quot;/var/opt/gitlab/gitlab-rails/uploads&amp;quot;
# gitlab_rails[&amp;#39;rate_limit_requests_per_period&amp;#39;] = 10
# gitlab_rails[&amp;#39;rate_limit_period&amp;#39;] = 60

# Change the initial default admin password.
# Only applicable on inital setup, changing this setting after database is created and seeded
# won&amp;#39;t yield any change.
# gitlab_rails[&amp;#39;initial_root_password&amp;#39;] = &amp;quot;password&amp;quot;

# Enable or disable automatic database migrations
# gitlab_rails[&amp;#39;auto_migrate&amp;#39;] = true

############################
# GitLab database settings #
############################
## see https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/doc/settings/database.md#database-settings
## Only needed if you use an external database.

# gitlab_rails[&amp;#39;db_adapter&amp;#39;] = &amp;quot;postgresql&amp;quot;
# gitlab_rails[&amp;#39;db_encoding&amp;#39;] = &amp;quot;unicode&amp;quot;
# gitlab_rails[&amp;#39;db_collation&amp;#39;] = nil
# gitlab_rails[&amp;#39;db_database&amp;#39;] = &amp;quot;gitlabhq_production&amp;quot;
# gitlab_rails[&amp;#39;db_pool&amp;#39;] = 10
# gitlab_rails[&amp;#39;db_username&amp;#39;] = &amp;quot;gitlab&amp;quot;
# gitlab_rails[&amp;#39;db_password&amp;#39;] = nil
# gitlab_rails[&amp;#39;db_host&amp;#39;] = nil
# gitlab_rails[&amp;#39;db_port&amp;#39;] = 5432
# gitlab_rails[&amp;#39;db_socket&amp;#39;] = nil
# gitlab_rails[&amp;#39;db_sslmode&amp;#39;] = nil
# gitlab_rails[&amp;#39;db_sslrootcert&amp;#39;] = nil


#########################
# GitLab redis settings #
#########################
## see https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/doc/settings/redis.md#redis-settings
## Connect to your own redis instance.

## Redis TCP connection
# gitlab_rails[&amp;#39;redis_host&amp;#39;] = &amp;quot;127.0.0.1&amp;quot;
# gitlab_rails[&amp;#39;redis_port&amp;#39;] = 6379
# gitlab_rails[&amp;#39;redis_password&amp;#39;] = nil
# gitlab_rails[&amp;#39;redis_database&amp;#39;] = 0

## Redis local UNIX socket (will be disabled if TCP method is used)
# gitlab_rails[&amp;#39;redis_socket&amp;#39;] = &amp;quot;/var/opt/gitlab/redis/redis.socket&amp;quot;

## Sentinel support
## To have sentinel working, you must enable Redis TCP connection support
## above ## and define a few sentinel hosts below (to get a reliable setup
## at least 3 hosts).
## You don&amp;#39;t need to list every sentinel host, but the ones unlisted will
## not be used in a fail-over situation to query for the new master.
# gitlab_rails[&amp;#39;redis_sentinels&amp;#39;] = [
#   {&amp;#39;host&amp;#39; =&amp;gt; &amp;#39;127.0.0.1&amp;#39;, &amp;#39;port&amp;#39; =&amp;gt; 26379},
# ]

################################
# GitLab email server settings #
################################
# see https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/doc/settings/smtp.md#smtp-settings
# Use smtp instead of sendmail/postfix.

# gitlab_rails[&amp;#39;smtp_enable&amp;#39;] = true
# gitlab_rails[&amp;#39;smtp_address&amp;#39;] = &amp;quot;smtp.server&amp;quot;
# gitlab_rails[&amp;#39;smtp_port&amp;#39;] = 465
# gitlab_rails[&amp;#39;smtp_user_name&amp;#39;] = &amp;quot;smtp user&amp;quot;
# gitlab_rails[&amp;#39;smtp_password&amp;#39;] = &amp;quot;smtp password&amp;quot;
# gitlab_rails[&amp;#39;smtp_domain&amp;#39;] = &amp;quot;example.com&amp;quot;
# gitlab_rails[&amp;#39;smtp_authentication&amp;#39;] = &amp;quot;login&amp;quot;
# gitlab_rails[&amp;#39;smtp_enable_starttls_auto&amp;#39;] = true
# gitlab_rails[&amp;#39;smtp_tls&amp;#39;] = false
# gitlab_rails[&amp;#39;smtp_openssl_verify_mode&amp;#39;] = &amp;#39;none&amp;#39; # Can be: &amp;#39;none&amp;#39;, &amp;#39;peer&amp;#39;, &amp;#39;client_once&amp;#39;, &amp;#39;fail_if_no_peer_cert&amp;#39;, see http://api.rubyonrails.org/classes/ActionMailer/Base.html
# gitlab_rails[&amp;#39;smtp_ca_path&amp;#39;] = &amp;quot;/etc/ssl/certs&amp;quot;
# gitlab_rails[&amp;#39;smtp_ca_file&amp;#39;] = &amp;quot;/etc/ssl/certs/ca-certificates.crt&amp;quot;

###############################
# Container Registry settings #
###############################
# See https://docs.gitlab.com/ce/administration/container_registry.html
#

# registry_external_url &amp;#39;https://registry.gitlab.example.com&amp;#39;

## Settings used by GitLab application
# gitlab_rails[&amp;#39;registry_enabled&amp;#39;] = true
# gitlab_rails[&amp;#39;registry_host&amp;#39;] = &amp;quot;registry.gitlab.example.com&amp;quot;
# gitlab_rails[&amp;#39;registry_port&amp;#39;] = &amp;quot;5005&amp;quot;
# gitlab_rails[&amp;#39;registry_path&amp;#39;] = &amp;quot;/var/opt/gitlab/gitlab-rails/shared/registry&amp;quot;
#
## Do not change the following 3 settings unless you know what you are doing
#
# gitlab_rails[&amp;#39;registry_api_url&amp;#39;] = &amp;quot;http://localhost:5000&amp;quot;
# gitlab_rails[&amp;#39;registry_key_path&amp;#39;] = &amp;quot;/var/opt/gitlab/gitlab-rails/certificate.key&amp;quot;
# gitlab_rails[&amp;#39;registry_issuer&amp;#39;] = &amp;quot;omnibus-gitlab-issuer&amp;quot;

## Settings used by Registry application
# registry[&amp;#39;enable&amp;#39;] = true
# registry[&amp;#39;username&amp;#39;] = &amp;quot;registry&amp;quot;
# registry[&amp;#39;group&amp;#39;] = &amp;quot;registry&amp;quot;
# registry[&amp;#39;uid&amp;#39;] = nil
# registry[&amp;#39;gid&amp;#39;] = nil
# registry[&amp;#39;dir&amp;#39;] = &amp;quot;/var/opt/gitlab/registry&amp;quot;
# registry[&amp;#39;registry_http_addr&amp;#39;] = &amp;quot;localhost:5000&amp;quot;
# registry[&amp;#39;debug_addr&amp;#39;] = &amp;quot;localhost:5001&amp;quot;
# registry[&amp;#39;log_directory&amp;#39;] = &amp;quot;/var/log/gitlab/registry&amp;quot;
# registry[&amp;#39;log_level&amp;#39;] = &amp;quot;info&amp;quot;
# registry[&amp;#39;rootcertbundle&amp;#39;] = &amp;quot;/var/opt/gitlab/registry/certificate.crt&amp;quot;
# registry[&amp;#39;storage_delete_enabled&amp;#39;] = true
# # Registry backend storage, see http://docs.gitlab.com/ce/administration/container_registry.html#container-registry-storage-driver
# registry[&amp;#39;storage&amp;#39;] = {
#   &amp;#39;s3&amp;#39; =&amp;gt; {
#     &amp;#39;accesskey&amp;#39; =&amp;gt; &amp;#39;AKIAKIAKI&amp;#39;,
#     &amp;#39;secretkey&amp;#39; =&amp;gt; &amp;#39;secret123&amp;#39;,
#     &amp;#39;bucket&amp;#39; =&amp;gt; &amp;#39;gitlab-registry-bucket-AKIAKIAKI&amp;#39;
#   }
# }

####################
# GitLab Workhorse #
####################
# see https://gitlab.com/gitlab-org/gitlab-workhorse/blob/master/README.md

# gitlab_workhorse[&amp;#39;enable&amp;#39;] = true
# gitlab_workhorse[&amp;#39;ha&amp;#39;] = false
# gitlab_workhorse[&amp;#39;listen_network&amp;#39;] = &amp;quot;unix&amp;quot;
# gitlab_workhorse[&amp;#39;listen_umask&amp;#39;] = 000
# gitlab_workhorse[&amp;#39;listen_addr&amp;#39;] = &amp;quot;/var/opt/gitlab/gitlab-workhorse/socket&amp;quot;
# gitlab_workhorse[&amp;#39;auth_backend&amp;#39;] = &amp;quot;http://localhost:8080&amp;quot;
# gitlab_workhorse[&amp;#39;auth_socket&amp;#39;] = &amp;quot;&amp;#39;&amp;#39;&amp;quot; # the empty string is the default in gitlab-workhorse option parser
# gitlab_workhorse[&amp;#39;pprof_listen_addr&amp;#39;] = &amp;quot;&amp;#39;&amp;#39;&amp;quot; # put an empty string on the command line
# gitlab_workhorse[&amp;#39;dir&amp;#39;] = &amp;quot;/var/opt/gitlab/gitlab-workhorse&amp;quot;
# gitlab_workhorse[&amp;#39;log_directory&amp;#39;] = &amp;quot;/var/log/gitlab/gitlab-workhorse&amp;quot;
# gitlab_workhorse[&amp;#39;proxy_headers_timeout&amp;#39;] = &amp;quot;1m0s&amp;quot;
# gitlab_workhorse[&amp;#39;api_limit&amp;#39;] = 0 # limit number of concurrent API requests, defaults to 0 which is unlimited
# gitlab_workhorse[&amp;#39;api_queue_limit&amp;#39;] = 0 # limit number of API requests allowed to be queued, defaults to 0 which disables queuing
# gitlab_workhorse[&amp;#39;api_queue_duration&amp;#39;] = &amp;quot;30s&amp;quot; # duration after which we timeout requests if they sit too long in the queue
# gitlab_workhorse[&amp;#39;env&amp;#39;] = {
#   &amp;#39;PATH&amp;#39; =&amp;gt; &amp;quot;/opt/gitlab/bin:/opt/gitlab/embedded/bin:/bin:/usr/bin&amp;quot;
# }

###############
# GitLab user #
###############
## see https://gitlab.com/gitlab-org/omnibus-gitlab/tree/master/README.md#changing-the-name-of-the-git-user-group
## Modify default git user.


# user[&amp;#39;username&amp;#39;] = &amp;quot;git&amp;quot;
# user[&amp;#39;group&amp;#39;] = &amp;quot;git&amp;quot;
# user[&amp;#39;uid&amp;#39;] = nil
# user[&amp;#39;gid&amp;#39;] = nil
# # The shell for the git user
# user[&amp;#39;shell&amp;#39;] = &amp;quot;/bin/sh&amp;quot;
# # The home directory for the git user
# user[&amp;#39;home&amp;#39;] = &amp;quot;/var/opt/gitlab&amp;quot;
# user[&amp;#39;git_user_name&amp;#39;] = &amp;quot;GitLab&amp;quot;
# user[&amp;#39;git_user_email&amp;#39;] = &amp;quot;gitlab@#{node[&amp;#39;fqdn&amp;#39;]}&amp;quot;

##################
# GitLab Unicorn #
##################
## Tweak unicorn settings.

# unicorn[&amp;#39;worker_timeout&amp;#39;] = 60
# unicorn[&amp;#39;worker_processes&amp;#39;] = 2

## Advanced settings
# unicorn[&amp;#39;listen&amp;#39;] = &amp;#39;127.0.0.1&amp;#39;
# unicorn[&amp;#39;port&amp;#39;] = 8080
# unicorn[&amp;#39;socket&amp;#39;] = &amp;#39;/var/opt/gitlab/gitlab-rails/sockets/gitlab.socket&amp;#39;
# unicorn[&amp;#39;pidfile&amp;#39;] = &amp;#39;/opt/gitlab/var/unicorn/unicorn.pid&amp;#39;
# unicorn[&amp;#39;tcp_nopush&amp;#39;] = true
# unicorn[&amp;#39;backlog_socket&amp;#39;] = 1024
# Make sure somaxconn is equal or higher then backlog_socket
# unicorn[&amp;#39;somaxconn&amp;#39;] = 1024
# We do not recommend changing this setting
# unicorn[&amp;#39;log_directory&amp;#39;] = &amp;quot;/var/log/gitlab/unicorn&amp;quot;

## Only change these settings if you understand well what they mean
## see https://about.gitlab.com/2015/06/05/how-gitlab-uses-unicorn-and-unicorn-worker-killer/
## and https://github.com/kzk/unicorn-worker-killer
# unicorn[&amp;#39;worker_memory_limit_min&amp;#39;] = &amp;quot;400 * 1 &amp;lt;&amp;lt; 20&amp;quot;
# unicorn[&amp;#39;worker_memory_limit_max&amp;#39;] = &amp;quot;650 * 1 &amp;lt;&amp;lt; 20&amp;quot;


##################
# GitLab Sidekiq #
##################

# sidekiq[&amp;#39;log_directory&amp;#39;] = &amp;quot;/var/log/gitlab/sidekiq&amp;quot;
# sidekiq[&amp;#39;shutdown_timeout&amp;#39;] = 4
# sidekiq[&amp;#39;concurrency&amp;#39;] = 25


################
# gitlab-shell #
################

# gitlab_shell[&amp;#39;audit_usernames&amp;#39;] = false
# gitlab_shell[&amp;#39;log_level&amp;#39;] = &amp;#39;INFO&amp;#39;
# gitlab_shell[&amp;#39;http_settings&amp;#39;] = { user: &amp;#39;username&amp;#39;, password: &amp;#39;password&amp;#39;, ca_file: &amp;#39;/etc/ssl/cert.pem&amp;#39;, ca_path: &amp;#39;/etc/pki/tls/certs&amp;#39;, self_signed_cert: false}
# gitlab_shell[&amp;#39;log_directory&amp;#39;] = &amp;quot;/var/log/gitlab/gitlab-shell/&amp;quot;

## If enabled, git-annex needs to be installed on the server where gitlab is setup
# For Debian and Ubuntu systems this can be done with: sudo apt-get install git-annex
# For CentOS: sudo yum install epel-release &amp;amp;&amp;amp; sudo yum install git-annex
# gitlab_shell[&amp;#39;git_annex_enabled&amp;#39;] = false

# gitlab_shell[&amp;#39;auth_file&amp;#39;] = &amp;quot;/var/opt/gitlab/.ssh/authorized_keys&amp;quot;


#####################
# GitLab PostgreSQL #
#####################

# postgresql[&amp;#39;enable&amp;#39;] = true
# postgresql[&amp;#39;listen_address&amp;#39;] = nil
# postgresql[&amp;#39;port&amp;#39;] = 5432
# postgresql[&amp;#39;data_dir&amp;#39;] = &amp;quot;/var/opt/gitlab/postgresql/data&amp;quot;
# postgresql[&amp;#39;shared_buffers&amp;#39;] = &amp;quot;256MB&amp;quot; # recommend value is 1/4 of total RAM, up to 14GB.

## Advanced settings
# postgresql[&amp;#39;ha&amp;#39;] = false
# postgresql[&amp;#39;dir&amp;#39;] = &amp;quot;/var/opt/gitlab/postgresql&amp;quot;
# postgresql[&amp;#39;log_directory&amp;#39;] = &amp;quot;/var/log/gitlab/postgresql&amp;quot;
# postgresql[&amp;#39;username&amp;#39;] = &amp;quot;gitlab-psql&amp;quot;
# postgresql[&amp;#39;uid&amp;#39;] = nil
# postgresql[&amp;#39;gid&amp;#39;] = nil
# postgresql[&amp;#39;shell&amp;#39;] = &amp;quot;/bin/sh&amp;quot;
# postgresql[&amp;#39;home&amp;#39;] = &amp;quot;/var/opt/gitlab/postgresql&amp;quot;
# postgresql[&amp;#39;user_path&amp;#39;] = &amp;quot;/opt/gitlab/embedded/bin:/opt/gitlab/bin:$PATH&amp;quot;
# postgresql[&amp;#39;sql_user&amp;#39;] = &amp;quot;gitlab&amp;quot;
# postgresql[&amp;#39;sql_ci_user&amp;#39;] = &amp;quot;gitlab_ci&amp;quot;
# postgresql[&amp;#39;max_connections&amp;#39;] = 200
# postgresql[&amp;#39;md5_auth_cidr_addresses&amp;#39;] = []
# postgresql[&amp;#39;trust_auth_cidr_addresses&amp;#39;] = []
# postgresql[&amp;#39;shmmax&amp;#39;] =  17179869184 # or 4294967295
# postgresql[&amp;#39;shmall&amp;#39;] =  4194304 # or 1048575
# postgresql[&amp;#39;work_mem&amp;#39;] = &amp;quot;8MB&amp;quot;
# postgresql[&amp;#39;maintenance_work_mem&amp;#39;] = &amp;quot;16MB&amp;quot;
# postgresql[&amp;#39;effective_cache_size&amp;#39;] = &amp;quot;1MB&amp;quot;
# postgresql[&amp;#39;checkpoint_segments&amp;#39;] = 10
# postgresql[&amp;#39;checkpoint_timeout&amp;#39;] = &amp;quot;5min&amp;quot;
# postgresql[&amp;#39;checkpoint_completion_target&amp;#39;] = 0.9
# postgresql[&amp;#39;checkpoint_warning&amp;#39;] = &amp;quot;30s&amp;quot;
# postgresql[&amp;#39;wal_buffers&amp;#39;] = &amp;quot;-1&amp;quot;
# postgresql[&amp;#39;autovacuum&amp;#39;] = &amp;quot;on&amp;quot;
# postgresql[&amp;#39;log_autovacuum_min_duration&amp;#39;] = &amp;quot;-1&amp;quot;
# postgresql[&amp;#39;autovacuum_max_workers&amp;#39;] = &amp;quot;3&amp;quot;
# postgresql[&amp;#39;autovacuum_naptime&amp;#39;] = &amp;quot;1min&amp;quot;
# postgresql[&amp;#39;autovacuum_vacuum_threshold&amp;#39;] = &amp;quot;50&amp;quot;
# postgresql[&amp;#39;autovacuum_analyze_threshold&amp;#39;] = &amp;quot;50&amp;quot;
# postgresql[&amp;#39;autovacuum_vacuum_scale_factor&amp;#39;] = &amp;quot;0.02&amp;quot;
# postgresql[&amp;#39;autovacuum_analyze_scale_factor&amp;#39;] = &amp;quot;0.01&amp;quot;
# postgresql[&amp;#39;autovacuum_freeze_max_age&amp;#39;] = &amp;quot;200000000&amp;quot;
# postgresql[&amp;#39;autovacuum_vacuum_cost_delay&amp;#39;] = &amp;quot;20ms&amp;quot;
# postgresql[&amp;#39;autovacuum_vacuum_cost_limit&amp;#39;] = &amp;quot;-1&amp;quot;
# postgresql[&amp;#39;statement_timeout&amp;#39;] = &amp;quot;0&amp;quot;
# postgresql[&amp;#39;log_line_prefix&amp;#39;] = &amp;quot;%a&amp;quot;
# postgresql[&amp;#39;track_activity_query_size&amp;#39;] = &amp;quot;1024&amp;quot;
# postgresql[&amp;#39;shared_preload_libraries&amp;#39;] = nil

## Replication settings
# postgresql[&amp;#39;sql_replication_user&amp;#39;] = &amp;quot;gitlab_replicator&amp;quot;
# postgresql[&amp;#39;wal_level&amp;#39;] = &amp;quot;hot_standby&amp;quot;
# postgresql[&amp;#39;max_wal_senders&amp;#39;] = 5
# postgresql[&amp;#39;wal_keep_segments&amp;#39;] = 10
# postgresql[&amp;#39;hot_standby&amp;#39;] = &amp;quot;off&amp;quot;

################
# GitLab Redis #
################
## Can be disabled if you are using your own redis instance.

# redis[&amp;#39;enable&amp;#39;] = true
# redis[&amp;#39;username&amp;#39;] = &amp;quot;gitlab-redis&amp;quot;
# redis[&amp;#39;maxclients&amp;#39;] = &amp;quot;10000&amp;quot;
# redis[&amp;#39;tcp_timeout&amp;#39;] = &amp;quot;60&amp;quot;
# redis[&amp;#39;tcp_keepalive&amp;#39;] = &amp;quot;300&amp;quot;
# redis[&amp;#39;uid&amp;#39;] = nil
# redis[&amp;#39;gid&amp;#39;] = nil

## Redis Sentinel support
## You need a master slave redis replication to be able to do failover
## Please read the documentation before enabling it to understand the
## caveats: https://docs.gitlab.com/ce/administration/high_availability/redis.html

## Redis TCP support (will disable UNIX socket transport)
# redis[&amp;#39;bind&amp;#39;] = &amp;#39;0.0.0.0&amp;#39; # or specify an IP to bind to a single one
# redis[&amp;#39;port&amp;#39;] = 6379

## Master redis instance (if this will act as a master instance uncomment and fill below)
# redis[&amp;#39;password&amp;#39;] = &amp;#39;&amp;lt;huge password string here&amp;gt;&amp;#39; # Only define this in the master instance

## Slave redis instance (if this will act as a slave / standby redis instance uncomment and fill below)
# redis[&amp;#39;master_ip&amp;#39;] = nil
# redis[&amp;#39;master_port&amp;#39;] = nil
# redis[&amp;#39;master_password&amp;#39;] = nil


#####################
# GitLab Web server #
#####################
## see: https://gitlab.com/gitlab-org/omnibus-gitlab/tree/master/doc/settings/nginx.md#using-a-non-bundled-web-server
## When bundled nginx is disabled we need to add the external webserver user to the GitLab webserver group.

# web_server[&amp;#39;external_users&amp;#39;] = []
# web_server[&amp;#39;username&amp;#39;] = &amp;#39;gitlab-www&amp;#39;
# web_server[&amp;#39;group&amp;#39;] = &amp;#39;gitlab-www&amp;#39;
# web_server[&amp;#39;uid&amp;#39;] = nil
# web_server[&amp;#39;gid&amp;#39;] = nil
# web_server[&amp;#39;shell&amp;#39;] = &amp;#39;/bin/false&amp;#39;
# web_server[&amp;#39;home&amp;#39;] = &amp;#39;/var/opt/gitlab/nginx&amp;#39;


################
# GitLab Nginx #
################
## see: https://gitlab.com/gitlab-org/omnibus-gitlab/tree/master/doc/settings/nginx.md

# nginx[&amp;#39;enable&amp;#39;] = true
# nginx[&amp;#39;client_max_body_size&amp;#39;] = &amp;#39;250m&amp;#39;
# nginx[&amp;#39;redirect_http_to_https&amp;#39;] = false
# nginx[&amp;#39;redirect_http_to_https_port&amp;#39;] = 80
# nginx[&amp;#39;ssl_client_certificate&amp;#39;] = &amp;quot;/etc/gitlab/ssl/ca.crt&amp;quot; # Most root CA&amp;#39;s are included by default
# nginx[&amp;#39;ssl_verify_client&amp;#39;] = &amp;quot;off&amp;quot; # enable/disable 2-way SSL client authentication
# nginx[&amp;#39;ssl_verify_depth&amp;#39;] = &amp;quot;1&amp;quot; # if ssl_verify_client on, verification depth in the client certificates chain
# nginx[&amp;#39;ssl_certificate&amp;#39;] = &amp;quot;/etc/gitlab/ssl/#{node[&amp;#39;fqdn&amp;#39;]}.crt&amp;quot;
# nginx[&amp;#39;ssl_certificate_key&amp;#39;] = &amp;quot;/etc/gitlab/ssl/#{node[&amp;#39;fqdn&amp;#39;]}.key&amp;quot;
# nginx[&amp;#39;ssl_ciphers&amp;#39;] = &amp;quot;ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256&amp;quot;
# nginx[&amp;#39;ssl_prefer_server_ciphers&amp;#39;] = &amp;quot;on&amp;quot;
# nginx[&amp;#39;ssl_protocols&amp;#39;] = &amp;quot;TLSv1 TLSv1.1 TLSv1.2&amp;quot; # recommended by https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html &amp;amp; https://cipherli.st/
# nginx[&amp;#39;ssl_session_cache&amp;#39;] = &amp;quot;builtin:1000  shared:SSL:10m&amp;quot; # recommended in http://nginx.org/en/docs/http/ngx_http_ssl_module.html
# nginx[&amp;#39;ssl_session_timeout&amp;#39;] = &amp;quot;5m&amp;quot; # default according to http://nginx.org/en/docs/http/ngx_http_ssl_module.html
# nginx[&amp;#39;ssl_dhparam&amp;#39;] = nil # Path to dhparams.pem, eg. /etc/gitlab/ssl/dhparams.pem
# nginx[&amp;#39;listen_addresses&amp;#39;] = [&amp;#39;*&amp;#39;]
# nginx[&amp;#39;listen_port&amp;#39;] = nil # override only if you use a reverse proxy: https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/doc/settings/nginx.md#setting-the-nginx-listen-port
# nginx[&amp;#39;listen_https&amp;#39;] = nil # override only if your reverse proxy internally communicates over HTTP: https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/doc/settings/nginx.md#supporting-proxied-ssl
# nginx[&amp;#39;custom_gitlab_server_config&amp;#39;] = &amp;quot;location ^~ /foo-namespace/bar-project/raw/ {\n deny all;\n}\n&amp;quot;
# nginx[&amp;#39;custom_nginx_config&amp;#39;] = &amp;quot;include /etc/nginx/conf.d/example.conf;&amp;quot;
# nginx[&amp;#39;proxy_read_timeout&amp;#39;] = 3600
# nginx[&amp;#39;proxy_connect_timeout&amp;#39;] = 300
# nginx[&amp;#39;proxy_set_headers&amp;#39;] = {
#  &amp;quot;Host&amp;quot; =&amp;gt; &amp;quot;$http_host&amp;quot;,
#  &amp;quot;X-Real-IP&amp;quot; =&amp;gt; &amp;quot;$remote_addr&amp;quot;,
#  &amp;quot;X-Forwarded-For&amp;quot; =&amp;gt; &amp;quot;$proxy_add_x_forwarded_for&amp;quot;,
#  &amp;quot;X-Forwarded-Proto&amp;quot; =&amp;gt; &amp;quot;https&amp;quot;,
#  &amp;quot;X-Forwarded-Ssl&amp;quot; =&amp;gt; &amp;quot;on&amp;quot;
# }
# nginx[&amp;#39;proxy_cache_path&amp;#39;] = &amp;#39;proxy_cache keys_zone=gitlab:10m max_size=1g levels=1:2&amp;#39;
# nginx[&amp;#39;proxy_cache&amp;#39;] = &amp;#39;gitlab&amp;#39;
# nginx[&amp;#39;http2_enabled&amp;#39;] = true
# nginx[&amp;#39;real_ip_trusted_addresses&amp;#39;] = []
# nginx[&amp;#39;real_ip_header&amp;#39;] = nil
# nginx[&amp;#39;real_ip_recursive&amp;#39;] = nil

## Advanced settings
# nginx[&amp;#39;dir&amp;#39;] = &amp;quot;/var/opt/gitlab/nginx&amp;quot;
# nginx[&amp;#39;log_directory&amp;#39;] = &amp;quot;/var/log/gitlab/nginx&amp;quot;
# nginx[&amp;#39;worker_processes&amp;#39;] = 4
# nginx[&amp;#39;worker_connections&amp;#39;] = 10240
# nginx[&amp;#39;log_format&amp;#39;] = &amp;#39;$remote_addr - $remote_user [$time_local] &amp;quot;$request&amp;quot; $status $body_bytes_sent &amp;quot;$http_referer&amp;quot; &amp;quot;$http_user_agent&amp;quot;&amp;#39;
# nginx[&amp;#39;sendfile&amp;#39;] = &amp;#39;on&amp;#39;
# nginx[&amp;#39;tcp_nopush&amp;#39;] = &amp;#39;on&amp;#39;
# nginx[&amp;#39;tcp_nodelay&amp;#39;] = &amp;#39;on&amp;#39;
# nginx[&amp;#39;gzip&amp;#39;] = &amp;quot;on&amp;quot;
# nginx[&amp;#39;gzip_http_version&amp;#39;] = &amp;quot;1.0&amp;quot;
# nginx[&amp;#39;gzip_comp_level&amp;#39;] = &amp;quot;2&amp;quot;
# nginx[&amp;#39;gzip_proxied&amp;#39;] = &amp;quot;any&amp;quot;
# nginx[&amp;#39;gzip_types&amp;#39;] = [ &amp;quot;text/plain&amp;quot;, &amp;quot;text/css&amp;quot;, &amp;quot;application/x-javascript&amp;quot;, &amp;quot;text/xml&amp;quot;, &amp;quot;application/xml&amp;quot;, &amp;quot;application/xml+rss&amp;quot;, &amp;quot;text/javascript&amp;quot;, &amp;quot;application/json&amp;quot; ]
# nginx[&amp;#39;keepalive_timeout&amp;#39;] = 65
# nginx[&amp;#39;cache_max_size&amp;#39;] = &amp;#39;5000m&amp;#39;
# nginx[&amp;#39;server_names_hash_bucket_size&amp;#39;] = 64

## Nginx status
# nginx[&amp;#39;status&amp;#39;][&amp;#39;enable&amp;#39;] = true
# nginx[&amp;#39;status&amp;#39;][&amp;#39;listen_addresses&amp;#39;] = [&amp;#39;*&amp;#39;]
# nginx[&amp;#39;status&amp;#39;][&amp;#39;fqdn&amp;#39;] = node[&amp;#39;fqdn&amp;#39;]
# nginx[&amp;#39;status&amp;#39;][&amp;#39;port&amp;#39;] = 8060
# nginx[&amp;#39;status&amp;#39;][&amp;#39;options&amp;#39;] = { # nginx_status location block options
#   &amp;quot;stub_status&amp;quot; =&amp;gt; &amp;quot;on&amp;quot;, # Turn on stats
#   &amp;quot;access_log&amp;quot; =&amp;gt; &amp;quot;off&amp;quot;, # Disable logs for stats
#   &amp;quot;allow&amp;quot; =&amp;gt; &amp;quot;127.0.0.1&amp;quot;, # Only allow access from localhost
#   &amp;quot;deny&amp;quot; =&amp;gt; &amp;quot;all&amp;quot;, # Deny access to anyone else
# }

##################
# GitLab Logging #
##################
## see: https://gitlab.com/gitlab-org/omnibus-gitlab/tree/master/README.md#logs

# logging[&amp;#39;svlogd_size&amp;#39;] = 200 * 1024 * 1024 # rotate after 200 MB of log data
# logging[&amp;#39;svlogd_num&amp;#39;] = 30 # keep 30 rotated log files
# logging[&amp;#39;svlogd_timeout&amp;#39;] = 24 * 60 * 60 # rotate after 24 hours
# logging[&amp;#39;svlogd_filter&amp;#39;] = &amp;quot;gzip&amp;quot; # compress logs with gzip
# logging[&amp;#39;svlogd_udp&amp;#39;] = nil # transmit log messages via UDP
# logging[&amp;#39;svlogd_prefix&amp;#39;] = nil # custom prefix for log messages
# logging[&amp;#39;logrotate_frequency&amp;#39;] = &amp;quot;daily&amp;quot; # rotate logs daily
# logging[&amp;#39;logrotate_size&amp;#39;] = nil # do not rotate by size by default
# logging[&amp;#39;logrotate_rotate&amp;#39;] = 30 # keep 30 rotated logs
# logging[&amp;#39;logrotate_compress&amp;#39;] = &amp;quot;compress&amp;quot; # see &amp;#39;man logrotate&amp;#39;
# logging[&amp;#39;logrotate_method&amp;#39;] = &amp;quot;copytruncate&amp;quot; # see &amp;#39;man logrotate&amp;#39;
# logging[&amp;#39;logrotate_postrotate&amp;#39;] = nil # no postrotate command by default
# logging[&amp;#39;logrotate_dateformat&amp;#39;] = nil # use date extensions for rotated files rather than numbers e.g. a value of &amp;quot;-%Y-%m-%d&amp;quot; would give rotated files like production.log-2016-03-09.gz
# Enterprise Edition only
# logging[&amp;#39;udp_log_shipping_host&amp;#39;] = nil # remote host to ship log messages to via UDP
# logging[&amp;#39;udp_log_shipping_port&amp;#39;] = 514 # remote host to ship log messages to via UDP

#############
# Logrotate #
#############
## see: https://gitlab.com/gitlab-org/omnibus-gitlab/tree/master/README.md#logrotate
## You can disable built in logrotate feature.

# logrotate[&amp;#39;enable&amp;#39;] = true

#############################
# Users and groups accounts #
#############################
## Disable management of users and groups accounts.
## Set only if creating accounts manually
## See: http://doc.gitlab.com/omnibus/settings/configuration.html#disable-user-and-group-account-management
# manage_accounts[&amp;#39;enable&amp;#39;] = false

#######################
# Storage directories #
#######################
## Disable managing storage directories
## Set only if the select directories are created manually
## See: http://doc.gitlab.com/omnibus/settings/configuration.html#disable-storage-directories-management
# manage_storage_directories[&amp;#39;enable&amp;#39;] = false
# manage_storage_directories[&amp;#39;manage_etc&amp;#39;] = false

#######
# Git #
#######
## Advanced setting for configuring git system settings for omnibus-gitlab internal git
## For multiple options under one header use array of comma separated values, eg.
## { &amp;quot;receive&amp;quot; =&amp;gt; [&amp;quot;fsckObjects = true&amp;quot;], &amp;quot;alias&amp;quot; =&amp;gt; [&amp;quot;st = status&amp;quot;, &amp;quot;co = checkout&amp;quot;] }

# omnibus_gitconfig[&amp;#39;system&amp;#39;] = { &amp;quot;receive&amp;quot; =&amp;gt; [&amp;quot;fsckObjects = true&amp;quot;] }

#############
# GitLab CI #
#############
## see https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/doc/gitlab-ci/README.md

# gitlab_ci[&amp;#39;gitlab_ci_all_broken_builds&amp;#39;] = true
# gitlab_ci[&amp;#39;gitlab_ci_add_pusher&amp;#39;] = true
# gitlab_ci[&amp;#39;builds_directory&amp;#39;] = &amp;#39;/var/opt/gitlab/gitlab-ci/builds&amp;#39;

# DEPRECATED
# ci_external_url &amp;#39;http://ci.example.com&amp;#39;
#

#####################
# GitLab Mattermost #
#####################

# mattermost_external_url &amp;#39;http://mattermost.example.com&amp;#39;
#
# mattermost[&amp;#39;enable&amp;#39;] = false
# mattermost[&amp;#39;username&amp;#39;] = &amp;#39;mattermost&amp;#39;
# mattermost[&amp;#39;group&amp;#39;] = &amp;#39;mattermost&amp;#39;
# mattermost[&amp;#39;uid&amp;#39;] = nil
# mattermost[&amp;#39;gid&amp;#39;] = nil
# mattermost[&amp;#39;home&amp;#39;] = &amp;#39;/var/opt/gitlab/mattermost&amp;#39;
# mattermost[&amp;#39;database_name&amp;#39;] = &amp;#39;mattermost_production&amp;#39;

# mattermost[&amp;#39;service_use_ssl&amp;#39;] = false
# mattermost[&amp;#39;service_address&amp;#39;] = &amp;quot;127.0.0.1&amp;quot;
# mattermost[&amp;#39;service_port&amp;#39;] = &amp;quot;8065&amp;quot;

# mattermost[&amp;#39;service_site_url&amp;#39;] = nil
# mattermost[&amp;#39;service_maximum_login_attempts&amp;#39;] = 10
# mattermost[&amp;#39;service_segment_developer_key&amp;#39;] = nil
# mattermost[&amp;#39;service_google_developer_key&amp;#39;] = nil
# mattermost[&amp;#39;service_enable_incoming_webhooks&amp;#39;] = true
# mattermost[&amp;#39;service_enable_post_username_override&amp;#39;] = false
# mattermost[&amp;#39;service_enable_post_icon_override&amp;#39;] = false
# mattermost[&amp;#39;service_enable_testing&amp;#39;] = false
# mattermost[&amp;#39;service_enable_security_fix_alert&amp;#39;] = true
# mattermost[&amp;#39;service_enable_insecure_outgoing_connections&amp;#39;] = false
# mattermost[&amp;#39;service_allow_cors_from&amp;#39;] = &amp;quot;&amp;quot;
# mattermost[&amp;#39;service_enable_outgoing_webhooks&amp;#39;] = true
# mattermost[&amp;#39;service_enable_commands&amp;#39;] = false
# mattermost[&amp;#39;service_enable_only_admin_integrations&amp;#39;] = true
# mattermost[&amp;#39;service_enable_oauth_service_provider&amp;#39;] = false
# mattermost[&amp;#39;service_enable_developer&amp;#39;] = false
# mattermost[&amp;#39;service_session_length_web_in_days&amp;#39;] = 30
# mattermost[&amp;#39;service_session_length_mobile_in_days&amp;#39;] = 30
# mattermost[&amp;#39;service_session_length_sso_in_days&amp;#39;] = 30
# mattermost[&amp;#39;service_session_cache_in_minutes&amp;#39;] = 10

# mattermost[&amp;#39;team_site_name&amp;#39;] = &amp;quot;GitLab Mattermost&amp;quot;
# mattermost[&amp;#39;team_max_users_per_team&amp;#39;] = 150
# mattermost[&amp;#39;team_enable_team_creation&amp;#39;] = true
# mattermost[&amp;#39;team_enable_user_creation&amp;#39;] = true
# mattermost[&amp;#39;team_enable_open_server&amp;#39;] = false
# mattermost[&amp;#39;team_allow_public_link&amp;#39;] = true
# mattermost[&amp;#39;team_allow_valet_default&amp;#39;] = false
# mattermost[&amp;#39;team_restrict_creation_to_domains&amp;#39;] = &amp;quot;gmail.com&amp;quot;
# mattermost[&amp;#39;team_restrict_team_names&amp;#39;] = true
# mattermost[&amp;#39;team_restrict_direct_message&amp;#39;] = &amp;quot;any&amp;quot;


# mattermost[&amp;#39;sql_driver_name&amp;#39;] = &amp;#39;mysql&amp;#39;
# mattermost[&amp;#39;sql_data_source&amp;#39;] = &amp;quot;mmuser:mostest@tcp(dockerhost:3306)/mattermost_test?charset=utf8mb4,utf8&amp;quot;
# mattermost[&amp;#39;sql_data_source_replicas&amp;#39;] = [&amp;quot;mmuser:mostest@tcp(dockerhost:3306)/mattermost_test?charset=utf8mb4,utf8&amp;quot;]
# mattermost[&amp;#39;sql_max_idle_conns&amp;#39;] = 10
# mattermost[&amp;#39;sql_max_open_conns&amp;#39;] = 10
# mattermost[&amp;#39;sql_trace&amp;#39;] = false

# mattermost[&amp;#39;log_file_directory&amp;#39;] = &amp;#39;/var/log/gitlab/mattermost&amp;#39;
# mattermost[&amp;#39;log_console_enable&amp;#39;] = true
# mattermost[&amp;#39;log_console_level&amp;#39;] = &amp;#39;INFO&amp;#39;
# mattermost[&amp;#39;log_enable_file&amp;#39;] = false
# mattermost[&amp;#39;log_file_level&amp;#39;] = &amp;#39;INFO&amp;#39;
# mattermost[&amp;#39;log_file_format&amp;#39;] = nil
# mattermost[&amp;#39;log_enable_diagnostics&amp;#39;] = true

# mattermost[&amp;#39;gitlab_enable&amp;#39;] = false
# mattermost[&amp;#39;gitlab_id&amp;#39;] = &amp;quot;12345656&amp;quot;
# mattermost[&amp;#39;gitlab_secret&amp;#39;] = &amp;quot;123456789&amp;quot;
# mattermost[&amp;#39;gitlab_scope&amp;#39;] = &amp;quot;&amp;quot;
# mattermost[&amp;#39;gitlab_auth_endpoint&amp;#39;] = &amp;quot;http://gitlab.example.com/oauth/authorize&amp;quot;
# mattermost[&amp;#39;gitlab_token_endpoint&amp;#39;] = &amp;quot;http://gitlab.example.com/oauth/token&amp;quot;
# mattermost[&amp;#39;gitlab_user_api_endpoint&amp;#39;] = &amp;quot;http://gitlab.example.com/api/v3/user&amp;quot;

# mattermost[&amp;#39;aws&amp;#39;] = {&amp;#39;S3AccessKeyId&amp;#39; =&amp;gt; &amp;#39;123&amp;#39;, &amp;#39;S3SecretAccessKey&amp;#39; =&amp;gt; &amp;#39;123&amp;#39;, &amp;#39;S3Bucket&amp;#39; =&amp;gt; &amp;#39;aa&amp;#39;, &amp;#39;S3Region&amp;#39; =&amp;gt; &amp;#39;bb&amp;#39;}

# mattermost[&amp;#39;email_enable_sign_up_with_email&amp;#39;] = true
# mattermost[&amp;#39;email_enable_sign_in_with_email&amp;#39;] = true
# mattermost[&amp;#39;email_enable_sign_in_with_username&amp;#39;] = false
# mattermost[&amp;#39;email_send_email_notifications&amp;#39;] = false
# mattermost[&amp;#39;email_require_email_verification&amp;#39;] = false
# mattermost[&amp;#39;email_smtp_username&amp;#39;] = nil
# mattermost[&amp;#39;email_smtp_password&amp;#39;] = nil
# mattermost[&amp;#39;email_smtp_server&amp;#39;] = nil
# mattermost[&amp;#39;email_smtp_port&amp;#39;] = nil
# mattermost[&amp;#39;email_connection_security&amp;#39;] = nil
# mattermost[&amp;#39;email_feedback_name&amp;#39;] = nil
# mattermost[&amp;#39;email_feedback_email&amp;#39;] = nil
# mattermost[&amp;#39;email_feedback_organization&amp;#39;] = nil
# mattermost[&amp;#39;email_send_push_notifications&amp;#39;] = true
# mattermost[&amp;#39;email_push_notification_server&amp;#39;] = &amp;quot;&amp;quot;
# mattermost[&amp;#39;email_push_notification_contents&amp;#39;] = &amp;quot;generic&amp;quot;
# mattermost[&amp;#39;email_enable_batching&amp;#39;] = false
# mattermost[&amp;#39;email_batching_buffer_size&amp;#39;] = 256
# mattermost[&amp;#39;email_batching_interval&amp;#39;] = 30

# mattermost[&amp;#39;file_max_file_size&amp;#39;] = 52428800
# mattermost[&amp;#39;file_driver_name&amp;#39;] = &amp;quot;local&amp;quot;
# mattermost[&amp;#39;file_directory&amp;#39;] = &amp;quot;/var/opt/gitlab/mattermost/data&amp;quot;
# mattermost[&amp;#39;file_enable_public_link&amp;#39;] = true
# mattermost[&amp;#39;file_thumbnail_width&amp;#39;] = 120
# mattermost[&amp;#39;file_thumbnail_height&amp;#39;] = 100
# mattermost[&amp;#39;file_preview_width&amp;#39;] = 1024
# mattermost[&amp;#39;file_preview_height&amp;#39;] = 0
# mattermost[&amp;#39;file_profile_width&amp;#39;] = 128
# mattermost[&amp;#39;file_profile_height&amp;#39;] = 128
# mattermost[&amp;#39;file_initial_font&amp;#39;] = &amp;#39;luximbi.ttf&amp;#39;
# mattermost[&amp;#39;file_amazon_s3_access_key_id&amp;#39;] = nil
# mattermost[&amp;#39;file_amazon_s3_bucket&amp;#39;] = nil
# mattermost[&amp;#39;file_amazon_s3_secret_access_key&amp;#39;] = nil
# mattermost[&amp;#39;file_amazon_s3_bucket&amp;#39;] = nil
# mattermost[&amp;quot;file_amazon_s3_endpoint&amp;quot;] = nil
# mattermost[&amp;quot;file_amazon_s3_bucket_endpoint&amp;quot;] = nil
# mattermost[&amp;quot;file_amazon_s3_location_constraint&amp;quot;] = false
# mattermost[&amp;quot;file_amazon_s3_lowercase_bucket&amp;quot;] = false

# mattermost[&amp;#39;ratelimit_enable_rate_limiter&amp;#39;] = true
# mattermost[&amp;#39;ratelimit_per_sec&amp;#39;] = 10
# mattermost[&amp;#39;ratelimit_memory_store_size&amp;#39;] = 10000
# mattermost[&amp;#39;ratelimit_vary_by_remote_addr&amp;#39;] = true
# mattermost[&amp;#39;ratelimit_vary_by_header&amp;#39;] = nil

# mattermost[&amp;#39;support_terms_of_service_link&amp;#39;] = &amp;quot;/static/help/terms.html&amp;quot;
# mattermost[&amp;#39;support_privacy_policy_link&amp;#39;] = &amp;quot;/static/help/privacy.html&amp;quot;
# mattermost[&amp;#39;support_about_link&amp;#39;] = &amp;quot;/static/help/about.html&amp;quot;
# mattermost[&amp;#39;support_report_a_problem_link&amp;#39;] =  &amp;quot;/static/help/report_problem.html&amp;quot;
# mattermost[&amp;#39;support_email&amp;#39;] =  &amp;quot;support@example.com&amp;quot;

# mattermost[&amp;#39;privacy_show_email_address&amp;#39;] = true
# mattermost[&amp;#39;privacy_show_full_name&amp;#39;] = true

# mattermost[&amp;#39;localization_server_locale&amp;#39;] = &amp;quot;en&amp;quot;
# mattermost[&amp;#39;localization_client_locale&amp;#39;] = &amp;quot;en&amp;quot;
# mattermost[&amp;#39;localization_available_locales&amp;#39;] = &amp;quot;en,es,fr,ja,pt-BR&amp;quot;

####################
# Mattermost NGINX #
####################

# mattermost_nginx[&amp;#39;enable&amp;#39;] = false
# mattermost_nginx[&amp;#39;client_max_body_size&amp;#39;] = &amp;#39;250m&amp;#39;
# mattermost_nginx[&amp;#39;redirect_http_to_https&amp;#39;] = false
# mattermost_nginx[&amp;#39;redirect_http_to_https_port&amp;#39;] = 80
# mattermost_nginx[&amp;#39;ssl_certificate&amp;#39;] = &amp;quot;/etc/gitlab/ssl/#{node[&amp;#39;fqdn&amp;#39;]}.crt&amp;quot;
# mattermost_nginx[&amp;#39;ssl_certificate_key&amp;#39;] = &amp;quot;/etc/gitlab/ssl/#{node[&amp;#39;fqdn&amp;#39;]}.key&amp;quot;
# mattermost_nginx[&amp;#39;ssl_ciphers&amp;#39;] = &amp;quot;ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256&amp;quot;
# mattermost_nginx[&amp;#39;ssl_prefer_server_ciphers&amp;#39;] = &amp;quot;on&amp;quot;
# mattermost_nginx[&amp;#39;ssl_protocols&amp;#39;] = &amp;quot;TLSv1 TLSv1.1 TLSv1.2&amp;quot; # recommended by https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html &amp;amp; https://cipherli.st/
# mattermost_nginx[&amp;#39;ssl_session_cache&amp;#39;] = &amp;quot;builtin:1000  shared:SSL:10m&amp;quot; # recommended in http://nginx.org/en/docs/http/ngx_http_ssl_module.html
# mattermost_nginx[&amp;#39;ssl_session_timeout&amp;#39;] = &amp;quot;5m&amp;quot; # default according to http://nginx.org/en/docs/http/ngx_http_ssl_module.html
# mattermost_nginx[&amp;#39;ssl_dhparam&amp;#39;] = nil # Path to ci_dhparams.pem, eg. /etc/gitlab/ssl/ci_dhparams.pem
# mattermost_nginx[&amp;#39;listen_addresses&amp;#39;] = [&amp;#39;*&amp;#39;]
# mattermost_nginx[&amp;#39;listen_port&amp;#39;] = nil # override only if you use a reverse proxy: https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/doc/settings/nginx.md#setting-the-nginx-listen-port
# mattermost_nginx[&amp;#39;listen_https&amp;#39;] = nil # override only if your reverse proxy internally communicates over HTTP: https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/doc/settings/nginx.md#supporting-proxied-ssl
# mattermost_nginx[&amp;#39;custom_gitlab_mattermost_server_config&amp;#39;] = &amp;quot;location ^~ /foo-namespace/bar-project/raw/ {\n deny all;\n}\n&amp;quot;
# mattermost_nginx[&amp;#39;proxy_set_headers&amp;#39;] = {
#   &amp;quot;Host&amp;quot; =&amp;gt; &amp;quot;$http_host&amp;quot;,
#   &amp;quot;X-Real-IP&amp;quot; =&amp;gt; &amp;quot;$remote_addr&amp;quot;,
#   &amp;quot;X-Forwarded-For&amp;quot; =&amp;gt; &amp;quot;$proxy_add_x_forwarded_for&amp;quot;,
#   &amp;quot;X-Frame-Options&amp;quot; =&amp;gt; &amp;quot;SAMEORIGIN&amp;quot;,
#   &amp;quot;X-Forwarded-Proto&amp;quot; =&amp;gt; &amp;quot;https&amp;quot;,
#   &amp;quot;X-Forwarded-Ssl&amp;quot; =&amp;gt; &amp;quot;on&amp;quot;
# }
# mattermost_nginx[&amp;#39;real_ip_trusted_addresses&amp;#39;] = []
# mattermost_nginx[&amp;#39;real_ip_header&amp;#39;] = nil
# mattermost_nginx[&amp;#39;real_ip_recursive&amp;#39;] = nil

## Advanced settings
# mattermost_nginx[&amp;#39;dir&amp;#39;] = &amp;quot;/var/opt/gitlab/nginx&amp;quot;
# mattermost_nginx[&amp;#39;log_directory&amp;#39;] = &amp;quot;/var/log/gitlab/nginx&amp;quot;
# mattermost_nginx[&amp;#39;worker_processes&amp;#39;] = 4
# mattermost_nginx[&amp;#39;worker_connections&amp;#39;] = 10240
# mattermost_nginx[&amp;#39;sendfile&amp;#39;] = &amp;#39;on&amp;#39;
# mattermost_nginx[&amp;#39;tcp_nopush&amp;#39;] = &amp;#39;on&amp;#39;
# mattermost_nginx[&amp;#39;tcp_nodelay&amp;#39;] = &amp;#39;on&amp;#39;
# mattermost_nginx[&amp;#39;gzip&amp;#39;] = &amp;quot;on&amp;quot;
# mattermost_nginx[&amp;#39;gzip_http_version&amp;#39;] = &amp;quot;1.0&amp;quot;
# mattermost_nginx[&amp;#39;gzip_comp_level&amp;#39;] = &amp;quot;2&amp;quot;
# mattermost_nginx[&amp;#39;gzip_proxied&amp;#39;] = &amp;quot;any&amp;quot;
# mattermost_nginx[&amp;#39;gzip_types&amp;#39;] = [ &amp;quot;text/plain&amp;quot;, &amp;quot;text/css&amp;quot;, &amp;quot;application/x-javascript&amp;quot;, &amp;quot;text/xml&amp;quot;, &amp;quot;application/xml&amp;quot;, &amp;quot;application/xml+rss&amp;quot;, &amp;quot;text/javascript&amp;quot;, &amp;quot;application/json&amp;quot; ]
# mattermost_nginx[&amp;#39;keepalive_timeout&amp;#39;] = 65
# mattermost_nginx[&amp;#39;cache_max_size&amp;#39;] = &amp;#39;5000m&amp;#39;

################
# GitLab Pages #
################

## Define to enable GitLab Pages
# pages_external_url &amp;quot;http://pages.example.com/&amp;quot;

# gitlab_pages[&amp;#39;enable&amp;#39;] = false
# gitlab_pages[&amp;#39;external_http&amp;#39;] = nil # Configure to expose GitLab Pages on external IP address, serving the HTTP
# gitlab_pages[&amp;#39;external_https&amp;#39;] = nil # Configure to expose GitLab Pages on external IP address, serving the HTTPS
# gitlab_pages[&amp;#39;listen_proxy&amp;#39;] = &amp;quot;localhost:8090&amp;quot;
# gitlab_pages[&amp;#39;redirect_http&amp;#39;] = true
# gitlab_pages[&amp;#39;use_http2&amp;#39;] = true
# gitlab_pages[&amp;#39;dir&amp;#39;] = &amp;quot;/var/opt/gitlab/gitlab-pages&amp;quot;
# gitlab_pages[&amp;#39;log_directory&amp;#39;] = &amp;quot;/var/log/gitlab/gitlab-pages&amp;quot;

######################
# GitLab Pages NGINX #
######################

# pages_nginx[&amp;#39;enable&amp;#39;] = false
# pages_nginx[&amp;#39;redirect_http_to_https&amp;#39;] = false
# pages_nginx[&amp;#39;redirect_http_to_https_port&amp;#39;] = 80
# pages_nginx[&amp;#39;ssl_certificate&amp;#39;] = &amp;quot;/etc/gitlab/ssl/#{node[&amp;#39;fqdn&amp;#39;]}.crt&amp;quot;
# pages_nginx[&amp;#39;ssl_certificate_key&amp;#39;] = &amp;quot;/etc/gitlab/ssl/#{node[&amp;#39;fqdn&amp;#39;]}.key&amp;quot;
# pages_nginx[&amp;#39;ssl_ciphers&amp;#39;] = &amp;quot;ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256&amp;quot;
# pages_nginx[&amp;#39;ssl_prefer_server_ciphers&amp;#39;] = &amp;quot;on&amp;quot;
# pages_nginx[&amp;#39;ssl_protocols&amp;#39;] = &amp;quot;TLSv1 TLSv1.1 TLSv1.2&amp;quot; # recommended by https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html &amp;amp; https://cipherli.st/
# pages_nginx[&amp;#39;ssl_session_cache&amp;#39;] = &amp;quot;builtin:1000  shared:SSL:10m&amp;quot; # recommended in http://nginx.org/en/docs/http/ngx_http_ssl_module.html
# pages_nginx[&amp;#39;ssl_session_timeout&amp;#39;] = &amp;quot;5m&amp;quot; # default according to http://nginx.org/en/docs/http/ngx_http_ssl_module.html
# pages_nginx[&amp;#39;ssl_dhparam&amp;#39;] = nil # Path to ci_dhparams.pem, eg. /etc/gitlab/ssl/ci_dhparams.pem
# pages_nginx[&amp;#39;listen_addresses&amp;#39;] = [&amp;#39;*&amp;#39;]
# pages_nginx[&amp;#39;listen_port&amp;#39;] = nil # override only if you use a reverse proxy: https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/doc/settings/nginx.md#setting-the-nginx-listen-port
# pages_nginx[&amp;#39;listen_https&amp;#39;] = nil # override only if your reverse proxy internally communicates over HTTP: https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/doc/settings/nginx.md#supporting-proxied-ssl
# pages_nginx[&amp;#39;custom_gitlab_server_config&amp;#39;] = &amp;quot;location ^~ /foo-namespace/bar-project/raw/ {\n deny all;\n}\n&amp;quot;

## Advanced settings
# pages_nginx[&amp;#39;dir&amp;#39;] = &amp;quot;/var/opt/gitlab/nginx&amp;quot;
# pages_nginx[&amp;#39;log_directory&amp;#39;] = &amp;quot;/var/log/gitlab/nginx&amp;quot;

##################
# Registry NGINX #
##################

# registry_nginx[&amp;#39;ssl_certificate&amp;#39;] = &amp;quot;/etc/gitlab/ssl/certificate.pem&amp;quot;
# registry_nginx[&amp;#39;ssl_certificate_key&amp;#39;] = &amp;quot;/etc/gitlab/ssl/certificate.key&amp;quot;
# registry_nginx[&amp;#39;listen_port&amp;#39;] = nil # override only if you use a reverse proxy: https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/doc/settings/nginx.md#setting-the-nginx-listen-port
# registry_nginx[&amp;#39;listen_https&amp;#39;] = nil # override only if your reverse proxy internally communicates over HTTP: https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/doc/settings/nginx.md#supporting-proxied-ssl
# registry_nginx[&amp;#39;proxy_set_headers&amp;#39;] = {
#  &amp;quot;Host&amp;quot; =&amp;gt; &amp;quot;$http_host&amp;quot;,
#  &amp;quot;X-Real-IP&amp;quot; =&amp;gt; &amp;quot;$remote_addr&amp;quot;,
#  &amp;quot;X-Forwarded-For&amp;quot; =&amp;gt; &amp;quot;$proxy_add_x_forwarded_for&amp;quot;,
#  &amp;quot;X-Forwarded-Proto&amp;quot; =&amp;gt; &amp;quot;https&amp;quot;,
#  &amp;quot;X-Forwarded-Ssl&amp;quot; =&amp;gt; &amp;quot;on&amp;quot;
# }&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/MertcanGokgoz/cde01bd73b523a5b575503bf12ff983a.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;Gitlab size oldukça fazla özelleştirme imkanı sunuyor. Bunları detaylı bir şekilde bu makale içerisinde anlatmak isterdim ancak gereğinden uzun olacağından dolayı her bir ayar için ayrı bir makale düzenlemeyi düşündüm.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;dipnot&lt;/strong&gt;: Bu kurulum sadece normal &lt;strong&gt;http&lt;/strong&gt; üzerinden çalışabilecek şekilde ayarları değiştirilmeden basit şekilde nasıl yapılabileceğini göstermek için yapılmıştır. &lt;strong&gt;Gitlab&lt;/strong&gt; kurulumu omnibus paket kullanılarak gerçekleştirilmiştir. Daha detaylı kurulum ve isteğe göre konfigürasyonları yapmak için kaynaktan kurulum yapılması gerekmektedir.&lt;/p&gt;
</description>
                <link>https://mertcangokgoz.com/debian-sistemler-icin-gitlab-kurulumu/</link>
                <guid>https://mertcangokgoz.com/debian-sistemler-icin-gitlab-kurulumu</guid>
                <pubDate>Sat, 15 Oct 2016 00:00:00 +0300</pubDate>
        </item>

        <item>
                <title>Jekyll Ditaa ASCII Art Eklentisi</title>
                <description>&lt;p&gt;Bu eklentiyi oldukça seviyorum ascii art şeklinde çizdiğiniz her türlü içeriği otomatik olarak resme dönüştürüp sayfanızda gösterebilmenize imkan tanıyor. ditaa’ya istediğinizi çizdirebilirsiniz. Tabi biraz yeteneğiniz olmalı çünkü oluşturana kadar biraz sıkıntı çekebilirsiniz. Otomatik oluşturan bir araç vs var mı bilmiyorum.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+--------+   +-------+    +-------+
    |        | --+ ditaa +--&amp;gt; |       |
    |  Text  |   +-------+    |diagram|
    |Document|   |!magic!|    |       |
    |     {d}|   |       |    |       |
    +---+----+   +-------+    +-------+
        :                         ^
        |       Lots of work      |
        +-------------------------+
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;şimdi yukarıdaki güzel çekli çizdirmek istersek ilk önce sisteme &lt;code class=&quot;highlighter-rouge&quot;&gt;ditaa&lt;/code&gt; paketini ekleyeceğiz sonra eklentiyi &lt;code class=&quot;highlighter-rouge&quot;&gt;_plugins&lt;/code&gt; klasörüne atacağız ve sonrasında otomatik olarak çizdiğiniz artık her neyse otomatik olarak resme dönüşecek&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apt-get install ditaa
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Kurulum tamamlanınca artık hazırsınız &lt;code class=&quot;highlighter-rouge&quot;&gt;ditaa&lt;/code&gt; uygulaması java ile yazıldığı için yüklenecek paketler çok olabilir gözünüz korkmasın.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;require &amp;#39;fileutils&amp;#39;
require &amp;#39;digest/md5&amp;#39;

module Jekyll
  class DitaaBlock &amp;lt; Liquid::Block
    def initialize(tag_name, markup, tokens)
      super

      @ditaa_exists = system(&amp;#39;which ditaa &amp;gt; /dev/null 2&amp;gt;&amp;amp;1&amp;#39;)
      @result = True

      if @ditaa_exists
        # No cheesy separations and shadows
        options = &amp;#39; -E -S -o&amp;#39;

        # There is always a blank line at the beginning, so we remove to get rid
        # of that undesired top padding in the ditaa output
        ditaa = @nodelist.to_s.gsub(/^$\n/, &amp;#39;&amp;#39;)

        hash = Digest::MD5.hexdigest(@nodelist.to_s)
        @png_name = &amp;#39;assets/ditaa/ditaa-&amp;#39; + hash + &amp;#39;.png&amp;#39;

        if not File.exists?(@png_name)
          File.open(&amp;#39;/tmp/ditaa-foo.txt&amp;#39;, &amp;#39;w&amp;#39;) {|f| f.write(ditaa)}
          @result = system(&amp;#39;ditaa /tmp/ditaa-foo.txt &amp;#39; + @png_name + options)
        end
      end
    end

    def render(context)
      if @ditaa_exists and @result
        &amp;#39;&amp;lt;figure&amp;gt;&amp;lt;img src=&amp;quot;/&amp;#39; + @png_name + &amp;#39;&amp;quot; /&amp;gt;&amp;lt;/figure&amp;gt;&amp;#39;
      else
        &amp;#39;&amp;lt;code&amp;gt;&amp;lt;pre&amp;gt;&amp;#39; + super + &amp;#39;&amp;lt;/pre&amp;gt;&amp;lt;/code&amp;gt;&amp;#39;
      end
    end
  end
end

Liquid::Template.register_tag(&amp;#39;ditaa&amp;#39;, Jekyll::DitaaBlock)
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/MertcanGokgoz/9c9d4325b5ab3d9e2541be8bf0b0247a.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;Oluşturulan resimler &lt;code class=&quot;highlighter-rouge&quot;&gt;assets/ditaa/&lt;/code&gt; klasörüne atılacağını unutmayın.&lt;/p&gt;

&lt;p&gt;öptüm bye &amp;lt;3&lt;/p&gt;
</description>
                <link>https://mertcangokgoz.com/jekyll-ditaa-ascii-art-eklentisi/</link>
                <guid>https://mertcangokgoz.com/jekyll-ditaa-ascii-art-eklentisi</guid>
                <pubDate>Wed, 12 Oct 2016 00:00:00 +0300</pubDate>
        </item>

        <item>
                <title>Nodejs Paketlerini Rootsuz Kurabilme Yetisi</title>
                <description>&lt;p&gt;Githubun kapatılması ve sonrasında tekrardan gelmesi ile birlikte yazılarımıza devam ediyoruz. Bildiğiniz gibi nodejs javascriptin sunucu tarafında takılan sürümü v8 javascript motoru üzerinde çalışıyor google amca arkasında bununda. Bu arkadaş ile oldukça güzel uygulama yazanlar var kafalar pırıl pırıl ve ciddi anlamda işe yarar uygulamalar doğuyor gönül isterdi ki bizde yazabilelim ama &lt;code class=&quot;highlighter-rouge&quot;&gt;java to javascript is car to carpet&lt;/code&gt; olduğundan dolayı işimiz yaş.&lt;/p&gt;

&lt;p&gt;Ben sisteme paket yükleme dışında genel anlamda yapılan dış kaynaklardan alınan dosyaların root izni ile kurulmasına karşı bir insanım gerek güvenlik gerekse kolaylık açısından home dizini altındaki kullanıcıya tanımlamak gerektiğini düşünüyorum.&lt;/p&gt;

&lt;p&gt;Hem yedekleme de hemde kullanıcıların dosyaları yönetmesinde kolaylık olacak her işlemde ikide bir root olup yok şunu kur şunu ayarla kafasına girmeyeceğiz. Eskiden olsa belki yapardık ancak şimdilerde pek hoş olmaz&lt;/p&gt;

&lt;p&gt;Sisteminizde nodejs ve npm paket yöneticisi yüklüdür diye düşünüyorum ve normal kullanıcı ile nasıl işlem yapılır bunu göstermek istiyorum.&lt;/p&gt;

&lt;p&gt;İlk önce node’nin paket yöneticisine yani &lt;strong&gt;npm&lt;/strong&gt; ye diyoruz ki işte bizim yeni yolumuz şu ama bunu derken root olmayın normal kullanıcı ile bu işlemlerin yapılması gerekiyor.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm config set prefix=$HOME/node
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;daha sonra &lt;code class=&quot;highlighter-rouge&quot;&gt;bashrc&lt;/code&gt; düzenlemesi yapıyoruz ki bu alana kurulan uygulamaları terminalde çalıştırabilelim.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export PATH=$HOME/node/bin:$PATH
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Şimdi bu ayarlamaları yapınız terminali açıp kapattınız &lt;code class=&quot;highlighter-rouge&quot;&gt;npm&lt;/code&gt; artık hazır normal kullanıcı ile istediğinizi kurdurabilirsiniz. Path ayarlaması yapıldı gerekli olan düzenlemelerde yapıldı şimdi size kalan uygulamalarınızı kurmak&lt;/p&gt;

&lt;p&gt;öptüm bye &amp;lt;3&lt;/p&gt;
</description>
                <link>https://mertcangokgoz.com/nodejs-paketlerini-rootsuz-kurabilme-yetisi/</link>
                <guid>https://mertcangokgoz.com/nodejs-paketlerini-rootsuz-kurabilme-yetisi</guid>
                <pubDate>Tue, 11 Oct 2016 00:00:00 +0300</pubDate>
        </item>

        <item>
                <title>Debian Üzerine Go Kurulumu ve PATH Ayarlama</title>
                <description>&lt;p&gt;Google tarafından geliştirilmiş açık kaynak kodlu bir programlama dili olan go ile yazılmış &lt;strong&gt;github&lt;/strong&gt; üzerinde bir sürü güzel proje bulmak ve bunları kurup kullanabilmek mümkün. Bu uygulamalar genellikle kolay, basit, güvenilir ve verimli oluyorlar ayrıca hızları da oldukça güzel&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Go&lt;/strong&gt; dili ile yazılmış pek çok web projesi olduğu gibi &lt;strong&gt;linux&lt;/strong&gt; için arka plana yazılmış uygulamalarda mevcut bunlar ile bir takım bilgi alma işlemleri yapabilir. Çıktıları düzenleyebilir ve sorgulama işlemleri yapabilirsiniz.&lt;/p&gt;

&lt;p&gt;Ama herşeyden önce bu dili sistemimiz için kurmamız gerekiyor. Bu kurulum oldukça kolay ancak kurulumdan sonra insanlar genelde go paketlerini ya kuramıyorlar yada kurduktan sonra çalıştıramıyorlar&lt;/p&gt;

&lt;p&gt;Aslında kurulmazsa zaten çalışmıyor. Çünkü Go kardeşin &lt;strong&gt;PATH&lt;/strong&gt; ayarlamasının yapılması gerekiyor. Ön tanımlı olarak bu ayarlamayı kendisi yapmıyor &lt;strong&gt;Go&lt;/strong&gt; için bu oldukça büyük bir dezavantaj&lt;/p&gt;

&lt;p&gt;Debian için ise kurulum oldukça basit ilk olarak paketleri sisteme dahil etmemiz gerekiyor. Debian paketlerini sorguladığımız web adresini ziyaret ediyoruz.&lt;/p&gt;

&lt;p&gt;Arama çubuğuna &lt;code class=&quot;highlighter-rouge&quot;&gt;golang&lt;/code&gt; yazıyoruz ve aratıyoruz. Karşımıza 1 adet paket çıkacak bunun üzerine tıklıyoruz. Görebildiğimiz gibi tüm debian dağıtımları için paketler mevcut bir yanlışlık da yok o zaman geçiyoruz kurmaya&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apt-get install golang
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Bu kurulum komutunu çalıştırdığımızda bağımlılıklarından olan 7 yada 4 adet paket kurması gerekiyor. &lt;strong&gt;Stretch&lt;/strong&gt; sürümü hariç diğer sürümlerde 3 yada 4 tane ek paket kuracağını unutmayın.&lt;/p&gt;

&lt;p&gt;Şimdi kurulum tamamlandıktan sonra &lt;strong&gt;PATH&lt;/strong&gt; ayarlamamız gerekiyor yoksa hiçbir işlem yapamayız. Devamlı bitmek tükenmeyen hatalar alırız ki bu hiç hoş bir durum değil&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd
nano .bashrc
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Dosyanın en altına gidiyoruz ve aşağıdaki satırları ekliyoruz.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export GOPATH=$HOME/go
export PATH=$PATH:$GOROOT/bin:$GOPATH/bin
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Kayıt edip çıkış yaptıktan sonra aktif olabilmesi için terminali kapatıp açmanız gerekiyor. Bunu yaptıktan hemen sonra ise &lt;strong&gt;Go&lt;/strong&gt; normal bir şekilde çalışmaya başlayacak ve uygulamalarınızı çalıştırmaya başlayabileceksiniz.&lt;/p&gt;

&lt;p&gt;öptüm bye &amp;lt;3&lt;/p&gt;
</description>
                <link>https://mertcangokgoz.com/debian-uzerine-go-kurulumu-ve-path-ayarlama/</link>
                <guid>https://mertcangokgoz.com/debian-uzerine-go-kurulumu-ve-path-ayarlama</guid>
                <pubDate>Sat, 08 Oct 2016 00:00:00 +0300</pubDate>
        </item>

        <item>
                <title>Jekyll Makale Güncellik Takip Eklentisi</title>
                <description>&lt;p&gt;Jekyll için oldukça güzel bir başka eklenti ile daha karşınızdayım yazdığınız yazıların güncelliği için oldukça faydalı olabilecek bir eklenti genellikle 6 aylık periyotlar dahilinde yazdığınız yazıları güncellemeniz önemli&lt;/p&gt;

&lt;p&gt;Dosya içerisinde gösterilen şekilde kullanabilirsiniz. &lt;code class=&quot;highlighter-rouge&quot;&gt;_plugins&lt;/code&gt; klasörü içerisine atmayı unutmayın&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;# An example Jekyll generator. Utilizes the new plugin system.
#
# 1. Make a _plugins directory in your jekyll site, and put this class in a file there.
# #  the deprecate of Jekyll that generated it
# exp: {{ page.date | render_deprecate: 6 }}

module Jekyll
  module RenderDeprecate

    def render_deprecate(pageTime, numOfMonth)

      if pageTime == nil
        return
      end

      currentMonths = (Time.now.year*12) + (Time.now.mon)
      articleMonths = (pageTime.year*12) + (pageTime.mon)
      diffMonth     = currentMonths - articleMonths

      if diffMonth &amp;gt;= numOfMonth
        &amp;quot;&amp;lt;span class=\&amp;quot;deprecate\&amp;quot;&amp;gt; DIKKAT!!! Bu makale çok eski olabilir.&amp;lt;/span&amp;gt;&amp;quot;
      else
        &amp;quot;&amp;quot;
      end

    end

  end
end

Liquid::Template.register_filter(Jekyll::RenderDeprecate)
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/MertcanGokgoz/e6f0233f1aa13b3191dc8f3f81e37a9d.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;Makelelerinizi güncelleyemiyorsanız bile bu eklenti ile ziyaretçilerinize makale hakkında son durumu belirtebilirsiniz. Özellikle çalışmasından şüphe duyduğunuz yada güncelliğinden emin olamadıklarınız için önerilir. 3, 6, 9 aylık olarak ayarlayabilirsiniz.&lt;/p&gt;

&lt;p&gt;öptüm by &amp;lt;3&lt;/p&gt;
</description>
                <link>https://mertcangokgoz.com/jekyll-makale-guncellik-takip-eklentisi/</link>
                <guid>https://mertcangokgoz.com/jekyll-makale-guncellik-takip-eklentisi</guid>
                <pubDate>Fri, 07 Oct 2016 00:00:00 +0300</pubDate>
        </item>


</channel>
</rss>
